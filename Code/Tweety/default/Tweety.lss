
Tweety.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800200  000023d0  00002464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800360  00800360  000025c4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006fb  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003665  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000362  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002a15  00000000  00000000  000066a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  000090bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fe  00000000  00000000  0000958c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012ad  00000000  00000000  00009c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000af37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_5>
      18:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ed       	ldi	r30, 0xD0	; 208
      fc:	f3 e2       	ldi	r31, 0x23	; 35
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 36       	cpi	r26, 0x60	; 96
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a0 e6       	ldi	r26, 0x60	; 96
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 38       	cpi	r26, 0x8A	; 138
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <main>
     122:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	fc 01       	movw	r30, r24
     130:	31 97       	sbiw	r30, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	40 e3       	ldi	r20, 0x30	; 48
     13a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	38 e4       	ldi	r19, 0x48	; 72
     142:	f9 01       	movw	r30, r18
     144:	31 97       	sbiw	r30, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     148:	42 98       	cbi	0x08, 2	; 8
     14a:	fc 01       	movw	r30, r24
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     154:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     156:	42 9a       	sbi	0x08, 2	; 8
     158:	f9 01       	movw	r30, r18
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15e:	42 98       	cbi	0x08, 2	; 8
     160:	fc 01       	movw	r30, r24
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16a:	48 b9       	out	0x08, r20	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16c:	42 9a       	sbi	0x08, 2	; 8
     16e:	f9 01       	movw	r30, r18
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     174:	42 98       	cbi	0x08, 2	; 8
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     17a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     17c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     17e:	80 e2       	ldi	r24, 0x20	; 32
     180:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     182:	42 9a       	sbi	0x08, 2	; 8
     184:	c9 01       	movw	r24, r18
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8

	
}
     18c:	08 95       	ret

0000018e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     18e:	98 b1       	in	r25, 0x08	; 8
     190:	9f 70       	andi	r25, 0x0F	; 15
     192:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     194:	28 b1       	in	r18, 0x08	; 8
     196:	98 2f       	mov	r25, r24
     198:	90 7f       	andi	r25, 0xF0	; 240
     19a:	92 2b       	or	r25, r18
     19c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     19e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1a0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	38 e4       	ldi	r19, 0x48	; 72
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1ae:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1b6:	98 b1       	in	r25, 0x08	; 8
     1b8:	82 95       	swap	r24
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	98 2b       	or	r25, r24
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	c9 01       	movw	r24, r18
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     1cc:	42 98       	cbi	0x08, 2	; 8
}
     1ce:	08 95       	ret

000001d0 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1d0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1d4:	86 e6       	ldi	r24, 0x66	; 102
     1d6:	9e e0       	ldi	r25, 0x0E	; 14
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     1dc:	88 e2       	ldi	r24, 0x28	; 40
     1de:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x01);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x06);
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x0E);
     1ee:	8e e0       	ldi	r24, 0x0E	; 14
     1f0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
	lcd_wr_command(0x80);
     1f4:	80 e8       	ldi	r24, 0x80	; 128
     1f6:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
		
}
     1fa:	08 95       	ret

000001fc <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     1fc:	98 b1       	in	r25, 0x08	; 8
     1fe:	9f 70       	andi	r25, 0x0F	; 15
     200:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     202:	28 b1       	in	r18, 0x08	; 8
     204:	98 2f       	mov	r25, r24
     206:	90 7f       	andi	r25, 0xF0	; 240
     208:	92 2b       	or	r25, r18
     20a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     20c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     20e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     210:	42 9a       	sbi	0x08, 2	; 8
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	38 e4       	ldi	r19, 0x48	; 72
     216:	f9 01       	movw	r30, r18
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     21c:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     21e:	98 b1       	in	r25, 0x08	; 8
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     224:	98 b1       	in	r25, 0x08	; 8
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 2b       	or	r25, r24
     22c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     22e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     230:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	c9 01       	movw	r24, r18
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     23a:	42 98       	cbi	0x08, 2	; 8
}
     23c:	08 95       	ret

0000023e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
}
     244:	08 95       	ret

00000246 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
     24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     24e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
		str++;
     252:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     254:	88 81       	ld	r24, Y
     256:	88 23       	and	r24, r24
     258:	d1 f7       	brne	.-12     	; 0x24e <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	69 f0       	breq	.+26     	; 0x27e <lcd_cursor+0x1e>
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	18 f4       	brcc	.+6      	; 0x26e <lcd_cursor+0xe>
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	a9 f4       	brne	.+42     	; 0x296 <lcd_cursor+0x36>
     26c:	05 c0       	rjmp	.+10     	; 0x278 <lcd_cursor+0x18>
     26e:	83 30       	cpi	r24, 0x03	; 3
     270:	49 f0       	breq	.+18     	; 0x284 <lcd_cursor+0x24>
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	81 f4       	brne	.+32     	; 0x296 <lcd_cursor+0x36>
     276:	0b c0       	rjmp	.+22     	; 0x28e <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     278:	86 2f       	mov	r24, r22
     27a:	81 58       	subi	r24, 0x81	; 129
     27c:	05 c0       	rjmp	.+10     	; 0x288 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     27e:	86 2f       	mov	r24, r22
     280:	81 54       	subi	r24, 0x41	; 65
     282:	02 c0       	rjmp	.+4      	; 0x288 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     284:	86 2f       	mov	r24, r22
     286:	8d 56       	subi	r24, 0x6D	; 109
     288:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     28c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     28e:	86 2f       	mov	r24, r22
     290:	8d 52       	subi	r24, 0x2D	; 45
     292:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_wr_command>
     296:	08 95       	ret

00000298 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	8a 01       	movw	r16, r20
     2a2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2a4:	88 23       	and	r24, r24
     2a6:	11 f0       	breq	.+4      	; 0x2ac <lcd_print+0x14>
     2a8:	66 23       	and	r22, r22
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <lcd_print+0x1a>
	{
		lcd_home();
     2ac:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_home>
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2b2:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2b6:	c5 30       	cpi	r28, 0x05	; 5
     2b8:	d1 05       	cpc	r29, r1
     2ba:	71 f4       	brne	.+28     	; 0x2d8 <lcd_print+0x40>
	{
		million=value/10000+48;
     2bc:	c8 01       	movw	r24, r16
     2be:	60 e1       	ldi	r22, 0x10	; 16
     2c0:	77 e2       	ldi	r23, 0x27	; 39
     2c2:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     2c6:	cb 01       	movw	r24, r22
     2c8:	c0 96       	adiw	r24, 0x30	; 48
     2ca:	90 93 7d 03 	sts	0x037D, r25
     2ce:	80 93 7c 03 	sts	0x037C, r24
		lcd_wr_char(million);
     2d2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     2d8:	c4 30       	cpi	r28, 0x04	; 4
     2da:	d1 05       	cpc	r29, r1
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <lcd_print+0x4a>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	16 c0       	rjmp	.+44     	; 0x30e <lcd_print+0x76>
	{
		temp = value/1000;
     2e2:	c8 01       	movw	r24, r16
     2e4:	68 ee       	ldi	r22, 0xE8	; 232
     2e6:	73 e0       	ldi	r23, 0x03	; 3
     2e8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     2ec:	cb 01       	movw	r24, r22
     2ee:	60 93 7e 03 	sts	0x037E, r22
     2f2:	90 93 7f 03 	sts	0x037F, r25
		thousand = temp%10 + 48;
     2f6:	6a e0       	ldi	r22, 0x0A	; 10
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     2fe:	c0 96       	adiw	r24, 0x30	; 48
     300:	90 93 89 03 	sts	0x0389, r25
     304:	80 93 88 03 	sts	0x0388, r24
		lcd_wr_char(thousand);
     308:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     30c:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     30e:	c3 30       	cpi	r28, 0x03	; 3
     310:	d1 05       	cpc	r29, r1
     312:	21 f0       	breq	.+8      	; 0x31c <lcd_print+0x84>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	11 f0       	breq	.+4      	; 0x31c <lcd_print+0x84>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	16 c0       	rjmp	.+44     	; 0x348 <lcd_print+0xb0>
	{
		temp = value/100;
     31c:	c8 01       	movw	r24, r16
     31e:	64 e6       	ldi	r22, 0x64	; 100
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     326:	cb 01       	movw	r24, r22
     328:	60 93 7e 03 	sts	0x037E, r22
     32c:	90 93 7f 03 	sts	0x037F, r25
		hundred = temp%10 + 48;
     330:	6a e0       	ldi	r22, 0x0A	; 10
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     338:	c0 96       	adiw	r24, 0x30	; 48
     33a:	90 93 85 03 	sts	0x0385, r25
     33e:	80 93 84 03 	sts	0x0384, r24
		lcd_wr_char(hundred);
     342:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     346:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     348:	c2 30       	cpi	r28, 0x02	; 2
     34a:	d1 05       	cpc	r29, r1
     34c:	21 f0       	breq	.+8      	; 0x356 <lcd_print+0xbe>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f0       	breq	.+4      	; 0x356 <lcd_print+0xbe>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	16 c0       	rjmp	.+44     	; 0x382 <lcd_print+0xea>
	{
		temp = value/10;
     356:	c8 01       	movw	r24, r16
     358:	6a e0       	ldi	r22, 0x0A	; 10
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     360:	cb 01       	movw	r24, r22
     362:	60 93 7e 03 	sts	0x037E, r22
     366:	90 93 7f 03 	sts	0x037F, r25
		tens = temp%10 + 48;
     36a:	6a e0       	ldi	r22, 0x0A	; 10
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     372:	c0 96       	adiw	r24, 0x30	; 48
     374:	90 93 82 03 	sts	0x0382, r25
     378:	80 93 81 03 	sts	0x0381, r24
		lcd_wr_char(tens);
     37c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
     380:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     382:	c1 30       	cpi	r28, 0x01	; 1
     384:	d1 05       	cpc	r29, r1
     386:	11 f0       	breq	.+4      	; 0x38c <lcd_print+0xf4>
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	61 f4       	brne	.+24     	; 0x3a4 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     38c:	c8 01       	movw	r24, r16
     38e:	6a e0       	ldi	r22, 0x0A	; 10
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
     396:	c0 96       	adiw	r24, 0x30	; 48
     398:	90 93 87 03 	sts	0x0387, r25
     39c:	80 93 86 03 	sts	0x0386, r24
		lcd_wr_char(unit);
     3a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	if(digits>5)
     3a4:	26 97       	sbiw	r28, 0x06	; 6
     3a6:	1c f0       	brlt	.+6      	; 0x3ae <lcd_print+0x116>
	{
		lcd_wr_char('E');
     3a8:	85 e4       	ldi	r24, 0x45	; 69
     3aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
	}
	
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	08 95       	ret

000003b8 <lcd_reset>:
unsigned int Degrees; //to accept angle in degrees for turning

unsigned char ADC_Value;

void lcd_reset()
{
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
	lcd_cursor(1,1);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
	lcd_string("                ");
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	12 e0       	ldi	r17, 0x02	; 2
     3c8:	c8 01       	movw	r24, r16
     3ca:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
	lcd_cursor(2,1);
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
	lcd_string("                ");
     3d6:	c8 01       	movw	r24, r16
     3d8:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
}
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	08 95       	ret

000003e2 <buzzer_pin_config>:
void buzzer_pin_config(void)
{
	DDRC = DDRC | 0x08;
     3e2:	3b 9a       	sbi	0x07, 3	; 7
}
     3e4:	08 95       	ret

000003e6 <buzzer_on>:
void buzzer_on(void)
{
	PORTC = PORTC | 0x08;
     3e6:	43 9a       	sbi	0x08, 3	; 8
}
     3e8:	08 95       	ret

000003ea <buzzer_off>:
void buzzer_off(void)
{
	PORTC = PORTC & ~(0x08);
     3ea:	43 98       	cbi	0x08, 3	; 8
}
     3ec:	08 95       	ret

000003ee <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     3ee:	87 b1       	in	r24, 0x07	; 7
     3f0:	87 6f       	ori	r24, 0xF7	; 247
     3f2:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     3f4:	88 b1       	in	r24, 0x08	; 8
     3f6:	80 78       	andi	r24, 0x80	; 128
     3f8:	88 b9       	out	0x08, r24	; 8
}
     3fa:	08 95       	ret

000003fc <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     3fc:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     3fe:	2e 9a       	sbi	0x05, 6	; 5
}
     400:	08 95       	ret

00000402 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     402:	e1 e8       	ldi	r30, 0x81	; 129
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     408:	8c ef       	ldi	r24, 0xFC	; 252
     40a:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     414:	93 e0       	ldi	r25, 0x03	; 3
     416:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     41a:	8f ef       	ldi	r24, 0xFF	; 255
     41c:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     420:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     424:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     428:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     42c:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     430:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     434:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     438:	8b ea       	ldi	r24, 0xAB	; 171
     43a:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     43e:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     442:	8c e0       	ldi	r24, 0x0C	; 12
     444:	80 83       	st	Z, r24
}
     446:	08 95       	ret

00000448 <adc_pin_config>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     448:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     44a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     44c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     450:	10 92 08 01 	sts	0x0108, r1
}
     454:	08 95       	ret

00000456 <adc_init_10bit>:


//Function to Initialize ADC
void adc_init_10bit()
{
	ADCSRA = 0x00;
     456:	ea e7       	ldi	r30, 0x7A	; 122
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     45c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     460:	10 92 7c 00 	sts	0x007C, r1
	ACSR = 0x80;
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     468:	86 e8       	ldi	r24, 0x86	; 134
     46a:	80 83       	st	Z, r24
}
     46c:	08 95       	ret

0000046e <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     46e:	81 b1       	in	r24, 0x01	; 1
     470:	8f 60       	ori	r24, 0x0F	; 15
     472:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     474:	82 b1       	in	r24, 0x02	; 2
     476:	80 7f       	andi	r24, 0xF0	; 240
     478:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     47a:	ea e0       	ldi	r30, 0x0A	; 10
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	80 81       	ld	r24, Z
     480:	88 61       	ori	r24, 0x18	; 24
     482:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     484:	eb e0       	ldi	r30, 0x0B	; 11
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	80 81       	ld	r24, Z
     48a:	88 61       	ori	r24, 0x18	; 24
     48c:	80 83       	st	Z, r24
}
     48e:	08 95       	ret

00000490 <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     490:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     492:	74 9a       	sbi	0x0e, 4	; 14
}
     494:	08 95       	ret

00000496 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     496:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     498:	75 9a       	sbi	0x0e, 5	; 14
}
     49a:	08 95       	ret

0000049c <left_position_encoder_interrupt_init>:


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     49c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     49e:	ea e6       	ldi	r30, 0x6A	; 106
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	82 60       	ori	r24, 0x02	; 2
     4a6:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     4a8:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     4aa:	78 94       	sei
}
     4ac:	08 95       	ret

000004ae <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     4ae:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     4b0:	ea e6       	ldi	r30, 0x6A	; 106
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     4ba:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     4bc:	78 94       	sei
}
     4be:	08 95       	ret

000004c0 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)  
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
 ShaftCountRight++;  //increment right shaft position count
     4d2:	80 91 64 03 	lds	r24, 0x0364
     4d6:	90 91 65 03 	lds	r25, 0x0365
     4da:	a0 91 66 03 	lds	r26, 0x0366
     4de:	b0 91 67 03 	lds	r27, 0x0367
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	a1 1d       	adc	r26, r1
     4e6:	b1 1d       	adc	r27, r1
     4e8:	80 93 64 03 	sts	0x0364, r24
     4ec:	90 93 65 03 	sts	0x0365, r25
     4f0:	a0 93 66 03 	sts	0x0366, r26
     4f4:	b0 93 67 03 	sts	0x0367, r27
}
     4f8:	bf 91       	pop	r27
     4fa:	af 91       	pop	r26
     4fc:	9f 91       	pop	r25
     4fe:	8f 91       	pop	r24
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
 ShaftCountLeft++;  //increment left shaft position count
     51c:	80 91 60 03 	lds	r24, 0x0360
     520:	90 91 61 03 	lds	r25, 0x0361
     524:	a0 91 62 03 	lds	r26, 0x0362
     528:	b0 91 63 03 	lds	r27, 0x0363
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	a1 1d       	adc	r26, r1
     530:	b1 1d       	adc	r27, r1
     532:	80 93 60 03 	sts	0x0360, r24
     536:	90 93 61 03 	sts	0x0361, r25
     53a:	a0 93 62 03 	sts	0x0362, r26
     53e:	b0 93 63 03 	sts	0x0363, r27
}
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     554:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     556:	90 7f       	andi	r25, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	89 2b       	or	r24, r25
 PORTA = PortARestore; 		// executing the command
     55c:	82 b9       	out	0x02, r24	; 2
}
     55e:	08 95       	ret

00000560 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     560:	e1 e2       	ldi	r30, 0x21	; 33
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     572:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     576:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     57a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     57e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     582:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     586:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     58a:	89 ea       	ldi	r24, 0xA9	; 169
     58c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     590:	8b e0       	ldi	r24, 0x0B	; 11
     592:	80 83       	st	Z, r24
}
     594:	08 95       	ret

00000596 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     596:	ea e7       	ldi	r30, 0x7A	; 122
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     59c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     5a0:	80 e2       	ldi	r24, 0x20	; 32
     5a2:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     5aa:	86 e8       	ldi	r24, 0x86	; 134
     5ac:	80 83       	st	Z, r24
}
     5ae:	08 95       	ret

000005b0 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     5b0:	10 92 8b 00 	sts	0x008B, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	a0 e0       	ldi	r26, 0x00	; 0
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	bc 01       	movw	r22, r24
     5bc:	cd 01       	movw	r24, r26
     5be:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__floatunsisf>
     5c2:	2b e7       	ldi	r18, 0x7B	; 123
     5c4:	34 e1       	ldi	r19, 0x14	; 20
     5c6:	4e ee       	ldi	r20, 0xEE	; 238
     5c8:	5f e3       	ldi	r21, 0x3F	; 63
     5ca:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divsf3>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	4c e0       	ldi	r20, 0x0C	; 12
     5d4:	52 e4       	ldi	r21, 0x42	; 66
     5d6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__addsf3>
     5da:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixunssfsi>
     5de:	60 93 8a 00 	sts	0x008A, r22
 
}
     5e2:	08 95       	ret

000005e4 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 8a 00 	sts	0x008A, r24
}
     5f0:	08 95       	ret

000005f2 <ADC_Conversion>:


//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     5f2:	98 2f       	mov	r25, r24
	unsigned char a;
	if(Ch>7)
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	18 f0       	brcs	.+6      	; 0x5fe <ADC_Conversion+0xc>
	{
		ADCSRB = 0x08;
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	80 93 7b 00 	sts	0x007B, r24
	}
	Ch = Ch & 0x07;  			
	ADMUX= 0x20| Ch;	   		
     5fe:	97 70       	andi	r25, 0x07	; 7
     600:	90 62       	ori	r25, 0x20	; 32
     602:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     606:	80 91 7a 00 	lds	r24, 0x007A
     60a:	80 64       	ori	r24, 0x40	; 64
     60c:	80 93 7a 00 	sts	0x007A, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     610:	80 91 7a 00 	lds	r24, 0x007A
     614:	84 ff       	sbrs	r24, 4
     616:	fc cf       	rjmp	.-8      	; 0x610 <ADC_Conversion+0x1e>
	a=ADCH;
     618:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     61c:	90 91 7a 00 	lds	r25, 0x007A
     620:	90 61       	ori	r25, 0x10	; 16
     622:	90 93 7a 00 	sts	0x007A, r25
	ADCSRB = 0x00;
     626:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     62a:	08 95       	ret

0000062c <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     62c:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     62e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     632:	80 93 80 03 	sts	0x0380, r24
	//lcd_print(row, coloumn, ADC_Value, 3);
}
     636:	08 95       	ret

00000638 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     638:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     63c:	60 93 2a 01 	sts	0x012A, r22
}
     640:	08 95       	ret

00000642 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     642:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     644:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     646:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     648:	82 b9       	out	0x02, r24	; 2
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     64a:	08 95       	ret

0000064c <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     64c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     64e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     650:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     652:	82 b9       	out	0x02, r24	; 2
}

void back (void) //both wheels backward
{
  motion_set(0x09);
}
     654:	08 95       	ret

00000656 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     656:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     658:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     65a:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     65c:	82 b9       	out	0x02, r24	; 2
}

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     65e:	08 95       	ret

00000660 <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     660:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     662:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     664:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     666:	82 b9       	out	0x02, r24	; 2
}

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
}
     668:	08 95       	ret

0000066a <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     66a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     66c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     66e:	84 60       	ori	r24, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     670:	82 b9       	out	0x02, r24	; 2
}

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     672:	08 95       	ret

00000674 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     674:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     676:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     678:	82 60       	ori	r24, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     67a:	82 b9       	out	0x02, r24	; 2
}

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
}
     67c:	08 95       	ret

0000067e <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     67e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     680:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     682:	81 60       	ori	r24, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     684:	82 b9       	out	0x02, r24	; 2
}

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     686:	08 95       	ret

00000688 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     688:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     68a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     68c:	88 60       	ori	r24, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     68e:	82 b9       	out	0x02, r24	; 2
}

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     690:	08 95       	ret

00000692 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     692:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     694:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     696:	82 b9       	out	0x02, r24	; 2
}

void stop (void) //hard stop
{
  motion_set(0x00);
}
     698:	08 95       	ret

0000069a <angle_rotate>:

void angle_rotate(unsigned int Degrees)
{
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__floatunsisf>
     6ae:	28 e4       	ldi	r18, 0x48	; 72
     6b0:	31 ee       	ldi	r19, 0xE1	; 225
     6b2:	42 e8       	ldi	r20, 0x82	; 130
     6b4:	50 e4       	ldi	r21, 0x40	; 64
     6b6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divsf3>
     6ba:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixunssfsi>
     6be:	7b 01       	movw	r14, r22
     6c0:	00 e0       	ldi	r16, 0x00	; 0
     6c2:	10 e0       	ldi	r17, 0x00	; 0
 ShaftCountRight = 0; 
     6c4:	10 92 64 03 	sts	0x0364, r1
     6c8:	10 92 65 03 	sts	0x0365, r1
     6cc:	10 92 66 03 	sts	0x0366, r1
     6d0:	10 92 67 03 	sts	0x0367, r1
 ShaftCountLeft = 0; 
     6d4:	10 92 60 03 	sts	0x0360, r1
     6d8:	10 92 61 03 	sts	0x0361, r1
     6dc:	10 92 62 03 	sts	0x0362, r1
     6e0:	10 92 63 03 	sts	0x0363, r1

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6e4:	80 91 64 03 	lds	r24, 0x0364
     6e8:	90 91 65 03 	lds	r25, 0x0365
     6ec:	a0 91 66 03 	lds	r26, 0x0366
     6f0:	b0 91 67 03 	lds	r27, 0x0367
     6f4:	20 91 60 03 	lds	r18, 0x0360
     6f8:	30 91 61 03 	lds	r19, 0x0361
     6fc:	40 91 62 03 	lds	r20, 0x0362
     700:	50 91 63 03 	lds	r21, 0x0363
     704:	8e 15       	cp	r24, r14
     706:	9f 05       	cpc	r25, r15
     708:	a0 07       	cpc	r26, r16
     70a:	b1 07       	cpc	r27, r17
     70c:	28 f4       	brcc	.+10     	; 0x718 <angle_rotate+0x7e>
     70e:	2e 15       	cp	r18, r14
     710:	3f 05       	cpc	r19, r15
     712:	40 07       	cpc	r20, r16
     714:	51 07       	cpc	r21, r17
     716:	30 f3       	brcs	.-52     	; 0x6e4 <angle_rotate+0x4a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     718:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     71a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     71c:	82 b9       	out	0x02, r24	; 2
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
 stop(); //Stop robot
}
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	08 95       	ret

00000728 <linear_distance_mm>:
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     728:	a0 e0       	ldi	r26, 0x00	; 0
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	bc 01       	movw	r22, r24
     72e:	cd 01       	movw	r24, r26
     730:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__floatunsisf>
     734:	25 ee       	ldi	r18, 0xE5	; 229
     736:	30 ed       	ldi	r19, 0xD0	; 208
     738:	4a ea       	ldi	r20, 0xAA	; 170
     73a:	50 e4       	ldi	r21, 0x40	; 64
     73c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divsf3>
     740:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixunssfsi>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
 //sendSignal(ReqShaftCountInt); 
 ShaftCountRight = 0;
     748:	10 92 64 03 	sts	0x0364, r1
     74c:	10 92 65 03 	sts	0x0365, r1
     750:	10 92 66 03 	sts	0x0366, r1
     754:	10 92 67 03 	sts	0x0367, r1
 while(1)
 {
   //sendSignal(ShaftCountRight);
  if(ShaftCountRight > ReqdShaftCountInt)
     758:	80 91 64 03 	lds	r24, 0x0364
     75c:	90 91 65 03 	lds	r25, 0x0365
     760:	a0 91 66 03 	lds	r26, 0x0366
     764:	b0 91 67 03 	lds	r27, 0x0367
     768:	28 17       	cp	r18, r24
     76a:	39 07       	cpc	r19, r25
     76c:	4a 07       	cpc	r20, r26
     76e:	5b 07       	cpc	r21, r27
     770:	98 f7       	brcc	.-26     	; 0x758 <linear_distance_mm+0x30>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     772:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     774:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     776:	82 b9       	out	0x02, r24	; 2
  {
  	break;
  }
 } 
 stop(); //Stop robot
}
     778:	08 95       	ret

0000077a <forward_mm>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     77a:	28 ec       	ldi	r18, 0xC8	; 200
     77c:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motor;
     780:	20 93 2a 01 	sts	0x012A, r18
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     784:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     786:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     788:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     78a:	22 b9       	out	0x02, r18	; 2

void forward_mm(unsigned int DistanceInMM)
{
 velocity(200,200);
 forward();
 linear_distance_mm(DistanceInMM);
     78c:	0e 94 94 03 	call	0x728	; 0x728 <linear_distance_mm>
}
     790:	08 95       	ret

00000792 <back_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     792:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     794:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     796:	29 60       	ori	r18, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     798:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
 back();
 linear_distance_mm(DistanceInMM);
     79a:	0e 94 94 03 	call	0x728	; 0x728 <linear_distance_mm>
}
     79e:	08 95       	ret

000007a0 <left_degrees>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7a0:	28 ec       	ldi	r18, 0xC8	; 200
     7a2:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motor;
     7a6:	20 93 2a 01 	sts	0x012A, r18
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7aa:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7ac:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7ae:	25 60       	ori	r18, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     7b0:	22 b9       	out	0x02, r18	; 2
void left_degrees(unsigned int Degrees) 
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 velocity(200,200);
 left(); //Turn left
 angle_rotate(Degrees);
     7b2:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     7b6:	08 95       	ret

000007b8 <right_degrees>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7b8:	28 ec       	ldi	r18, 0xC8	; 200
     7ba:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motor;
     7be:	20 93 2a 01 	sts	0x012A, r18
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7c2:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7c4:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7c6:	2a 60       	ori	r18, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     7c8:	22 b9       	out	0x02, r18	; 2
void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 velocity(200,200);
 right(); //Turn right
 angle_rotate(Degrees);
     7ca:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     7ce:	08 95       	ret

000007d0 <soft_left_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7d0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7d2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7d4:	24 60       	ori	r18, 0x04	; 4
 PORTA = PortARestore; 		// executing the command
     7d6:	22 b9       	out	0x02, r18	; 2
void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     7e0:	08 95       	ret

000007e2 <soft_right_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7e2:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7e4:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7e6:	22 60       	ori	r18, 0x02	; 2
 PORTA = PortARestore; 		// executing the command
     7e8:	22 b9       	out	0x02, r18	; 2
void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     7f2:	08 95       	ret

000007f4 <soft_left_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     7f4:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     7f6:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     7f8:	21 60       	ori	r18, 0x01	; 1
 PORTA = PortARestore; 		// executing the command
     7fa:	22 b9       	out	0x02, r18	; 2
void soft_left_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     804:	08 95       	ret

00000806 <soft_right_2_degrees>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     806:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     808:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     80a:	28 60       	ori	r18, 0x08	; 8
 PORTA = PortARestore; 		// executing the command
     80c:	22 b9       	out	0x02, r18	; 2
void soft_right_2_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	0e 94 4d 03 	call	0x69a	; 0x69a <angle_rotate>
}
     816:	08 95       	ret

00000818 <lcd_clear_print>:


void lcd_clear_print(char row, char coloumn, unsigned int value, int digits)
{
//	lcd_clear();
	lcd_print(row,coloumn,value,digits);
     818:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
}
     81c:	08 95       	ret

0000081e <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     81e:	e1 ec       	ldi	r30, 0xC1	; 193
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     824:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     828:	86 e0       	ldi	r24, 0x06	; 6
     82a:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     82e:	8f e5       	ldi	r24, 0x5F	; 95
     830:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     834:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     838:	88 e9       	ldi	r24, 0x98	; 152
     83a:	80 83       	st	Z, r24
}
     83c:	08 95       	ret

0000083e <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
	rcvFlag = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 6b 03 	sts	0x036B, r25
     854:	80 93 6a 03 	sts	0x036A, r24
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
     858:	80 91 c6 00 	lds	r24, 0x00C6
     85c:	80 93 83 03 	sts	0x0383, r24
			UDR0 = data;
			//UDR0 = bflag + 48;
			//moveTo (intPosData, charDirData);
		}
	}*/
}
     860:	9f 91       	pop	r25
     862:	8f 91       	pop	r24
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <sendSignal>:

void sendSignal(char msg)
{
	UDR0 = msg;
     86e:	80 93 c6 00 	sts	0x00C6, r24
}
     872:	08 95       	ret

00000874 <init_zigbee>:


//Function To Initialize all The Devices
void init_zigbee()
{
 cli(); //Clears the global interrupts
     874:	f8 94       	cli
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
     876:	e1 ec       	ldi	r30, 0xC1	; 193
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     87c:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
     886:	8f e5       	ldi	r24, 0x5F	; 95
     888:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
     88c:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
     890:	88 e9       	ldi	r24, 0x98	; 152
     892:	80 83       	st	Z, r24
//Function To Initialize all The Devices
void init_zigbee()
{
 cli(); //Clears the global interrupts
 uart0_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
     894:	78 94       	sei
}
     896:	08 95       	ret

00000898 <readZigbee>:

unsigned char readZigbee()
{
	while(!rcvFlag);
     898:	80 91 6a 03 	lds	r24, 0x036A
     89c:	90 91 6b 03 	lds	r25, 0x036B
     8a0:	89 2b       	or	r24, r25
     8a2:	d1 f3       	breq	.-12     	; 0x898 <readZigbee>
	rcvFlag=0;
     8a4:	10 92 6b 03 	sts	0x036B, r1
     8a8:	10 92 6a 03 	sts	0x036A, r1
	return data;
     8ac:	80 91 83 03 	lds	r24, 0x0383
}
     8b0:	08 95       	ret

000008b2 <isFollowLine>:
}
*/


int isFollowLine(unsigned char line)
{
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	88 32       	cpi	r24, 0x28	; 40
     8b8:	10 f0       	brcs	.+4      	; 0x8be <isFollowLine+0xc>
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	30 e0       	ldi	r19, 0x00	; 0
	if(line<0x28)
		return 0;       // return 1 for BWB, 0 otherwise
	else
		return 1;		// complement of above value
}
     8be:	c9 01       	movw	r24, r18
     8c0:	08 95       	ret

000008c2 <stopOnFollowLine>:

void stopOnFollowLine()
{
	while(1)
	{
		Center_white_line = ADC_Conversion(2);
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     8c8:	80 93 6e 03 	sts	0x036E, r24
		if(isFollowLine(Center_white_line))
     8cc:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     8d0:	88 32       	cpi	r24, 0x28	; 40
     8d2:	b8 f3       	brcs	.-18     	; 0x8c2 <stopOnFollowLine>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8d4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8d6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     8d8:	82 b9       	out	0x02, r24	; 2
		{
			stop();
			break;
		}
	}
}
     8da:	08 95       	ret

000008dc <right_upto_follow_line>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8dc:	88 ec       	ldi	r24, 0xC8	; 200
     8de:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8e2:	80 93 2a 01 	sts	0x012A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8e6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8e8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8ea:	8a 60       	ori	r24, 0x0A	; 10
 PORTA = PortARestore; 		// executing the command
     8ec:	82 b9       	out	0x02, r24	; 2

void right_upto_follow_line()
{
	velocity(200,200);
	right();
	stopOnFollowLine();
     8ee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <stopOnFollowLine>
}
     8f2:	08 95       	ret

000008f4 <left_upto_follow_line>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8f4:	88 ec       	ldi	r24, 0xC8	; 200
     8f6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8fa:	80 93 2a 01 	sts	0x012A, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     8fe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     900:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     902:	85 60       	ori	r24, 0x05	; 5
 PORTA = PortARestore; 		// executing the command
     904:	82 b9       	out	0x02, r24	; 2

void left_upto_follow_line()
{
	velocity(200,200);
	left();
	stopOnFollowLine();
     906:	0e 94 61 04 	call	0x8c2	; 0x8c2 <stopOnFollowLine>
}
     90a:	08 95       	ret

0000090c <linear_distance_follow_mm>:

//Function used for moving robot forward by specified distance following follow line
void linear_distance_follow_mm(unsigned int DistanceInMM)
{
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
	 float ReqdShaftCount = 0;
 	 unsigned long int ReqdShaftCountInt = 0;

	 ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
	 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__floatunsisf>
     920:	25 ee       	ldi	r18, 0xE5	; 229
     922:	30 ed       	ldi	r19, 0xD0	; 208
     924:	4a ea       	ldi	r20, 0xAA	; 170
     926:	50 e4       	ldi	r21, 0x40	; 64
     928:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__divsf3>
     92c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fixunssfsi>
     930:	7b 01       	movw	r14, r22
     932:	8c 01       	movw	r16, r24
	 ShaftCountRight = 0;
     934:	10 92 64 03 	sts	0x0364, r1
     938:	10 92 65 03 	sts	0x0365, r1
     93c:	10 92 66 03 	sts	0x0366, r1
     940:	10 92 67 03 	sts	0x0367, r1
	 while(1)
	 {
	 		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     94a:	80 93 6d 03 	sts	0x036D, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     954:	80 93 6e 03 	sts	0x036E, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Senso
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     95e:	80 93 6f 03 	sts	0x036F, r24

	 		// bot has slipped left
	 		if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     962:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     966:	88 32       	cpi	r24, 0x28	; 40
     968:	20 f4       	brcc	.+8      	; 0x972 <linear_distance_follow_mm+0x66>
	 		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Senso

	 		// bot has slipped left
	 		if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     96a:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     96e:	88 32       	cpi	r24, 0x28	; 40
     970:	68 f5       	brcc	.+90     	; 0x9cc <linear_distance_follow_mm+0xc0>
			{
				forward();
				velocity(normalSpeed,lowSpeed);
			}
			// bot has slipped right
			else if(isFollowLine(Left_white_line)/* && !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     972:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     976:	88 32       	cpi	r24, 0x28	; 40
     978:	50 f0       	brcs	.+20     	; 0x98e <linear_distance_follow_mm+0x82>
     97a:	35 c0       	rjmp	.+106    	; 0x9e6 <linear_distance_follow_mm+0xda>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     97c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     97e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     980:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     982:	82 b9       	out	0x02, r24	; 2
			}
			// bot has slipped right
			else if(isFollowLine(Left_white_line)/* && !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
			{
				forward();
				velocity(lowSpeed,normalSpeed);
     984:	80 91 53 02 	lds	r24, 0x0253
     988:	90 91 51 02 	lds	r25, 0x0251
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <linear_distance_follow_mm+0xd0>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     98e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     990:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     992:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     994:	82 b9       	out	0x02, r24	; 2
			}
			else
			{
				forward();
				velocity(normalSpeed,normalSpeed);
     996:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     99a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     99e:	80 93 2a 01 	sts	0x012A, r24
			}
		  if(ShaftCountRight > ReqdShaftCountInt)
     9a2:	80 91 64 03 	lds	r24, 0x0364
     9a6:	90 91 65 03 	lds	r25, 0x0365
     9aa:	a0 91 66 03 	lds	r26, 0x0366
     9ae:	b0 91 67 03 	lds	r27, 0x0367
     9b2:	e8 16       	cp	r14, r24
     9b4:	f9 06       	cpc	r15, r25
     9b6:	0a 07       	cpc	r16, r26
     9b8:	1b 07       	cpc	r17, r27
     9ba:	20 f6       	brcc	.-120    	; 0x944 <linear_distance_follow_mm+0x38>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9bc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9be:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     9c0:	82 b9       	out	0x02, r24	; 2
		  {
		  	break;
		  }
	 } 
	 stop();
}
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9cc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9ce:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9d0:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9d2:	82 b9       	out	0x02, r24	; 2

	 		// bot has slipped left
	 		if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
			{
				forward();
				velocity(normalSpeed,lowSpeed);
     9d4:	80 91 51 02 	lds	r24, 0x0251
     9d8:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9dc:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     9e0:	90 93 2a 01 	sts	0x012A, r25
     9e4:	de cf       	rjmp	.-68     	; 0x9a2 <linear_distance_follow_mm+0x96>
			}
			// bot has slipped right
			else if(isFollowLine(Left_white_line)/* && !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     9e6:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     9ea:	88 32       	cpi	r24, 0x28	; 40
     9ec:	38 f2       	brcs	.-114    	; 0x97c <linear_distance_follow_mm+0x70>
     9ee:	cf cf       	rjmp	.-98     	; 0x98e <linear_distance_follow_mm+0x82>

000009f0 <forward_follow_mm>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9f0:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9f2:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     9f4:	22 b9       	out	0x02, r18	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     9f6:	22 b1       	in	r18, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     9f8:	20 7f       	andi	r18, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     9fa:	26 60       	ori	r18, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     9fc:	22 b9       	out	0x02, r18	; 2
// forward "DistanceInMM" distance following white(or black) line
void forward_follow_mm(unsigned int DistanceInMM)
{
	stop();
 	forward();
	velocity(normalSpeed,normalSpeed);
     9fe:	20 91 51 02 	lds	r18, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a02:	20 93 28 01 	sts	0x0128, r18
	OCR5BL = (unsigned char)right_motor;
     a06:	20 93 2a 01 	sts	0x012A, r18
 	linear_distance_follow_mm(DistanceInMM);
     a0a:	0e 94 86 04 	call	0x90c	; 0x90c <linear_distance_follow_mm>
}
     a0e:	08 95       	ret

00000a10 <goToPreviousPoint>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a10:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a12:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     a14:	82 b9       	out	0x02, r24	; 2
void goToPreviousPoint()
{
	stop();
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     a1c:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     a26:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Senso
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     a30:	80 93 6f 03 	sts	0x036F, r24

		// bot has slipped left
		if(/*!isFollowLine(Left_white_line)) && !isFollowLine(Center_white_line) && */isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     a34:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     a38:	88 32       	cpi	r24, 0x28	; 40
     a3a:	e8 f4       	brcc	.+58     	; 0xa76 <goToPreviousPoint+0x66>
		{
			back();
			velocity(lowSpeed,normalSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line))///* && !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     a3c:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     a40:	88 32       	cpi	r24, 0x28	; 40
     a42:	10 f5       	brcc	.+68     	; 0xa88 <goToPreviousPoint+0x78>
		{
			back();
			velocity(normalSpeed,lowSpeed);
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line)  && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//center(just start when 0-w-0)
     a44:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     a48:	88 32       	cpi	r24, 0x28	; 40
     a4a:	80 f0       	brcs	.+32     	; 0xa6c <goToPreviousPoint+0x5c>
     a4c:	2a c0       	rjmp	.+84     	; 0xaa2 <goToPreviousPoint+0x92>
		{
			back();
			velocity(normalSpeed,lowSpeed);
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line)  && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//center(just start when 0-w-0)
     a4e:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     a52:	88 32       	cpi	r24, 0x28	; 40
     a54:	58 f4       	brcc	.+22     	; 0xa6c <goToPreviousPoint+0x5c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a56:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a58:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a5a:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     a5c:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line)  && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//center(just start when 0-w-0)
		{
			back();
			velocity(normalSpeed,normalSpeed);
     a5e:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a62:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a66:	80 93 2a 01 	sts	0x012A, r24
     a6a:	d5 cf       	rjmp	.-86     	; 0xa16 <goToPreviousPoint+0x6>
		}
		// checkpoint found
		else if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     a6c:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     a70:	88 32       	cpi	r24, 0x28	; 40
     a72:	88 f2       	brcs	.-94     	; 0xa16 <goToPreviousPoint+0x6>
     a74:	1b c0       	rjmp	.+54     	; 0xaac <goToPreviousPoint+0x9c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a76:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a78:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a7a:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     a7c:	82 b9       	out	0x02, r24	; 2

		// bot has slipped left
		if(/*!isFollowLine(Left_white_line)) && !isFollowLine(Center_white_line) && */isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			back();
			velocity(lowSpeed,normalSpeed);
     a7e:	80 91 53 02 	lds	r24, 0x0253
     a82:	90 91 51 02 	lds	r25, 0x0251
     a86:	08 c0       	rjmp	.+16     	; 0xa98 <goToPreviousPoint+0x88>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a88:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a8a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a8c:	89 60       	ori	r24, 0x09	; 9
 PORTA = PortARestore; 		// executing the command
     a8e:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line))///* && !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			back();
			velocity(normalSpeed,lowSpeed);
     a90:	80 91 51 02 	lds	r24, 0x0251
     a94:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a98:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a9c:	90 93 2a 01 	sts	0x012A, r25
     aa0:	ba cf       	rjmp	.-140    	; 0xa16 <goToPreviousPoint+0x6>
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line)  && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//center(just start when 0-w-0)
     aa2:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     aa6:	88 32       	cpi	r24, 0x28	; 40
     aa8:	90 f2       	brcs	.-92     	; 0xa4e <goToPreviousPoint+0x3e>
     aaa:	e0 cf       	rjmp	.-64     	; 0xa6c <goToPreviousPoint+0x5c>
		{
			back();
			velocity(normalSpeed,normalSpeed);
		}
		// checkpoint found
		else if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     aac:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     ab0:	88 32       	cpi	r24, 0x28	; 40
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <goToPreviousPoint+0xa6>
     ab4:	b0 cf       	rjmp	.-160    	; 0xa16 <goToPreviousPoint+0x6>
		{
			back();
			velocity(normalSpeed,normalSpeed);
		}
		// checkpoint found
		else if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     ab6:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     aba:	88 32       	cpi	r24, 0x28	; 40
     abc:	08 f4       	brcc	.+2      	; 0xac0 <goToPreviousPoint+0xb0>
     abe:	ab cf       	rjmp	.-170    	; 0xa16 <goToPreviousPoint+0x6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ac0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ac2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     ac4:	82 b9       	out	0x02, r24	; 2
		{
			stop();
			break;
		}
	}
}
     ac6:	08 95       	ret

00000ac8 <goToNextPoint>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ac8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     aca:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     acc:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ace:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ad0:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ad2:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     ad4:	82 b9       	out	0x02, r24	; 2
	stop();
	forward();
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     adc:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     ae6:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     af0:	80 93 6f 03 	sts	0x036F, r24

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     afa:	80 93 80 03 	sts	0x0380, r24
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     b04:	80 93 80 03 	sts	0x0380, r24
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     b0e:	80 93 80 03 	sts	0x0380, r24
     b12:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b16:	88 32       	cpi	r24, 0x28	; 40
     b18:	f0 f4       	brcc	.+60     	; 0xb56 <goToNextPoint+0x8e>
		{
			stop();
			break;
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     b1a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b1e:	88 32       	cpi	r24, 0x28	; 40
     b20:	20 f4       	brcc	.+8      	; 0xb2a <goToNextPoint+0x62>
		{
			stop();
			break;
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     b22:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b26:	88 32       	cpi	r24, 0x28	; 40
     b28:	10 f5       	brcc	.+68     	; 0xb6e <goToNextPoint+0xa6>
		{
			forward();
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     b2a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b2e:	88 32       	cpi	r24, 0x28	; 40
     b30:	68 f0       	brcs	.+26     	; 0xb4c <goToNextPoint+0x84>
     b32:	2a c0       	rjmp	.+84     	; 0xb88 <goToNextPoint+0xc0>
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			flag=1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 6c 03 	sts	0x036C, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b3a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b3c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b3e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b40:	82 b9       	out	0x02, r24	; 2
			forward();
			velocity(lowSpeed,normalSpeed);
     b42:	80 91 53 02 	lds	r24, 0x0253
     b46:	90 91 51 02 	lds	r25, 0x0251
     b4a:	19 c0       	rjmp	.+50     	; 0xb7e <goToNextPoint+0xb6>
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
     b4c:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b50:	88 32       	cpi	r24, 0x28	; 40
     b52:	08 f2       	brcs	.-126    	; 0xad6 <goToNextPoint+0xe>
     b54:	1e c0       	rjmp	.+60     	; 0xb92 <goToNextPoint+0xca>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     b56:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b5a:	88 32       	cpi	r24, 0x28	; 40
     b5c:	f0 f2       	brcs	.-68     	; 0xb1a <goToNextPoint+0x52>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && isFollowLine(Left_white_line) && isFollowLine(Right_white_line)) //checkpoint-(w-w-w)
     b5e:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b62:	88 32       	cpi	r24, 0x28	; 40
     b64:	d0 f2       	brcs	.-76     	; 0xb1a <goToNextPoint+0x52>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b66:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b68:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     b6a:	82 b9       	out	0x02, r24	; 2
		//if(!isFollowLine(Center_white_line) && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//end stop(b-b-b)
		//{
			//velocity(0,0);
		//}
	}
}
     b6c:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b6e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b70:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b72:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b74:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			forward();
			velocity(normalSpeed,lowSpeed);
     b76:	80 91 51 02 	lds	r24, 0x0251
     b7a:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b7e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     b82:	90 93 2a 01 	sts	0x012A, r25
     b86:	a7 cf       	rjmp	.-178    	; 0xad6 <goToNextPoint+0xe>
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     b88:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     b8c:	88 32       	cpi	r24, 0x28	; 40
     b8e:	90 f2       	brcs	.-92     	; 0xb34 <goToNextPoint+0x6c>
     b90:	dd cf       	rjmp	.-70     	; 0xb4c <goToNextPoint+0x84>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     b92:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     b94:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     b96:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     b98:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
		{
			forward();
			velocity(normalSpeed,normalSpeed);
     b9a:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b9e:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ba2:	80 93 2a 01 	sts	0x012A, r24
     ba6:	97 cf       	rjmp	.-210    	; 0xad6 <goToNextPoint+0xe>

00000ba8 <goToRestPosition>:
* rotate 180 degree from current position and follow the line upto 0th checkpoint.
* rotate 180 degree there and stop.
*
*/
void goToRestPosition(unsigned char currentCheckPoint)
{
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	18 2f       	mov	r17, r24
	forward_mm(botLength);
     bb4:	80 91 55 02 	lds	r24, 0x0255
     bb8:	90 91 56 02 	lds	r25, 0x0256
     bbc:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
	right_degrees(135);
     bc0:	87 e8       	ldi	r24, 0x87	; 135
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
	right_upto_follow_line();
     bc8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     bcc:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     bce:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     bd0:	82 b9       	out	0x02, r24	; 2
     bd2:	c0 e0       	ldi	r28, 0x00	; 0
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	60 e7       	ldi	r22, 0x70	; 112
     bd8:	e6 2e       	mov	r14, r22
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	f6 2e       	mov	r15, r22
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <goToRestPosition+0x3c>
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	d0 e0       	ldi	r29, 0x00	; 0

	stop();
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     bea:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     bf4:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     bfe:	80 93 6f 03 	sts	0x036F, r24

		flag=0;
     c02:	10 92 6c 03 	sts	0x036C, r1

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     c0c:	80 93 80 03 	sts	0x0380, r24
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     c16:	80 93 80 03 	sts	0x0380, r24
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     c20:	80 93 80 03 	sts	0x0380, r24
     c24:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     c28:	88 32       	cpi	r24, 0x28	; 40
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <goToRestPosition+0x86>
     c2c:	55 c0       	rjmp	.+170    	; 0xcd8 <goToRestPosition+0x130>
     c2e:	77 c0       	rjmp	.+238    	; 0xd1e <goToRestPosition+0x176>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     c30:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     c34:	88 32       	cpi	r24, 0x28	; 40
     c36:	08 f4       	brcc	.+2      	; 0xc3a <goToRestPosition+0x92>
     c38:	4f c0       	rjmp	.+158    	; 0xcd8 <goToRestPosition+0x130>
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
		{
			
			if (checkpointFound==0)
     c3a:	20 97       	sbiw	r28, 0x00	; 0
     c3c:	09 f0       	breq	.+2      	; 0xc40 <goToRestPosition+0x98>
     c3e:	41 c0       	rjmp	.+130    	; 0xcc2 <goToRestPosition+0x11a>
			{
				checkpointFound=1;
				currentCheckPoint--;
     c40:	11 50       	subi	r17, 0x01	; 1
				//lcd_clear_print(1,1,currentCheckPoint,3);
				//_delay_ms(1000);
				if(currentCheckPoint%3!=0)
     c42:	81 2f       	mov	r24, r17
     c44:	63 e0       	ldi	r22, 0x03	; 3
     c46:	0e 94 8f 11 	call	0x231e	; 0x231e <__udivmodqi4>
     c4a:	99 23       	and	r25, r25
     c4c:	01 f1       	breq	.+64     	; 0xc8e <goToRestPosition+0xe6>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c4e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c50:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c52:	82 b9       	out	0x02, r24	; 2
				{
					//_delay_ms(1000);
					stop();
					forward_mm(botLength);
     c54:	80 91 55 02 	lds	r24, 0x0255
     c58:	90 91 56 02 	lds	r25, 0x0256
     c5c:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c60:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c62:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c64:	82 b9       	out	0x02, r24	; 2
     c66:	80 e1       	ldi	r24, 0x10	; 16
     c68:	97 e2       	ldi	r25, 0x27	; 39
     c6a:	f7 01       	movw	r30, r14
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <goToRestPosition+0xc4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	d9 f7       	brne	.-10     	; 0xc6a <goToRestPosition+0xc2>
					stop();
					_delay_ms(1000);
					left_degrees(45);
     c74:	8d e2       	ldi	r24, 0x2D	; 45
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <left_degrees>
					left_upto_follow_line();
     c7c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <left_upto_follow_line>
     c80:	80 e1       	ldi	r24, 0x10	; 16
     c82:	97 e2       	ldi	r25, 0x27	; 39
     c84:	f7 01       	movw	r30, r14
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <goToRestPosition+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8c:	d9 f7       	brne	.-10     	; 0xc84 <goToRestPosition+0xdc>
					_delay_ms(1000);
				}
				if(currentCheckPoint==0)
     c8e:	11 23       	and	r17, r17
     c90:	19 f0       	breq	.+6      	; 0xc98 <goToRestPosition+0xf0>
     c92:	c1 e0       	ldi	r28, 0x01	; 1
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	3d c0       	rjmp	.+122    	; 0xd12 <goToRestPosition+0x16a>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     c98:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     c9a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     c9c:	82 b9       	out	0x02, r24	; 2
				{
					stop();
					forward_mm(botLength);
     c9e:	80 91 55 02 	lds	r24, 0x0255
     ca2:	90 91 56 02 	lds	r25, 0x0256
     ca6:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
					right_degrees(135);
     caa:	87 e8       	ldi	r24, 0x87	; 135
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
					right_upto_follow_line();
     cb2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
		if(!isFollowLine(Left_white_line) || !isFollowLine(Right_white_line))
		{
			checkpointFound=0;
		}
	}
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cc2:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cc4:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cc6:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     cc8:	82 b9       	out	0x02, r24	; 2
				}
			}
			else
			{
				forward();
				velocity(normalSpeed,normalSpeed);
     cca:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cce:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     cd2:	80 93 2a 01 	sts	0x012A, r24
     cd6:	1d c0       	rjmp	.+58     	; 0xd12 <goToRestPosition+0x16a>
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     cd8:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     cdc:	88 32       	cpi	r24, 0x28	; 40
     cde:	20 f4       	brcc	.+8      	; 0xce8 <goToRestPosition+0x140>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     ce0:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     ce4:	88 32       	cpi	r24, 0x28	; 40
     ce6:	08 f5       	brcc	.+66     	; 0xd2a <goToRestPosition+0x182>
		{
			forward();
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     ce8:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     cec:	88 32       	cpi	r24, 0x28	; 40
     cee:	68 f0       	brcs	.+26     	; 0xd0a <goToRestPosition+0x162>
     cf0:	29 c0       	rjmp	.+82     	; 0xd44 <goToRestPosition+0x19c>
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			flag=1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 6c 03 	sts	0x036C, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     cf8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     cfa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     cfc:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     cfe:	82 b9       	out	0x02, r24	; 2
			forward();
			velocity(lowSpeed,normalSpeed);
     d00:	80 91 53 02 	lds	r24, 0x0253
     d04:	90 91 51 02 	lds	r25, 0x0251
     d08:	18 c0       	rjmp	.+48     	; 0xd3a <goToRestPosition+0x192>
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
     d0a:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     d0e:	88 32       	cpi	r24, 0x28	; 40
     d10:	f0 f4       	brcc	.+60     	; 0xd4e <goToRestPosition+0x1a6>
		//End of white line or bot out of track
		//if(!isFollowLine(Center_white_line) && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//end stop(b-b-b)
		//{
			//velocity(0,0);
		//}
		if(!isFollowLine(Left_white_line) || !isFollowLine(Right_white_line))
     d12:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     d16:	88 32       	cpi	r24, 0x28	; 40
     d18:	08 f4       	brcc	.+2      	; 0xd1c <goToRestPosition+0x174>
     d1a:	62 cf       	rjmp	.-316    	; 0xbe0 <goToRestPosition+0x38>
     d1c:	25 c0       	rjmp	.+74     	; 0xd68 <goToRestPosition+0x1c0>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     d1e:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     d22:	88 32       	cpi	r24, 0x28	; 40
     d24:	08 f4       	brcc	.+2      	; 0xd28 <goToRestPosition+0x180>
     d26:	84 cf       	rjmp	.-248    	; 0xc30 <goToRestPosition+0x88>
     d28:	88 cf       	rjmp	.-240    	; 0xc3a <goToRestPosition+0x92>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d2a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d2c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d2e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d30:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			forward();
			velocity(normalSpeed,lowSpeed);
     d32:	80 91 51 02 	lds	r24, 0x0251
     d36:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d3a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d3e:	90 93 2a 01 	sts	0x012A, r25
     d42:	e7 cf       	rjmp	.-50     	; 0xd12 <goToRestPosition+0x16a>
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     d44:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     d48:	88 32       	cpi	r24, 0x28	; 40
     d4a:	98 f2       	brcs	.-90     	; 0xcf2 <goToRestPosition+0x14a>
     d4c:	de cf       	rjmp	.-68     	; 0xd0a <goToRestPosition+0x162>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d4e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d50:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     d52:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     d54:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
		{
			forward();
			velocity(normalSpeed,normalSpeed);
     d56:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d5a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d5e:	80 93 2a 01 	sts	0x012A, r24
     d62:	c0 e0       	ldi	r28, 0x00	; 0
     d64:	d0 e0       	ldi	r29, 0x00	; 0
     d66:	d5 cf       	rjmp	.-86     	; 0xd12 <goToRestPosition+0x16a>
		//End of white line or bot out of track
		//if(!isFollowLine(Center_white_line) && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//end stop(b-b-b)
		//{
			//velocity(0,0);
		//}
		if(!isFollowLine(Left_white_line) || !isFollowLine(Right_white_line))
     d68:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     d6c:	88 32       	cpi	r24, 0x28	; 40
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <goToRestPosition+0x1ca>
     d70:	37 cf       	rjmp	.-402    	; 0xbe0 <goToRestPosition+0x38>
     d72:	38 cf       	rjmp	.-400    	; 0xbe4 <goToRestPosition+0x3c>

00000d74 <goToCheckPoint>:
* constraint : goes only in further direction
*
*/

void goToCheckPoint(unsigned char currentCheckPoint,unsigned char checkpointToProcess)
{
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	18 2f       	mov	r17, r24
     d82:	06 2f       	mov	r16, r22
	if(checkpointToProcess==0)
     d84:	66 23       	and	r22, r22
     d86:	19 f4       	brne	.+6      	; 0xd8e <goToCheckPoint+0x1a>
	{
		goToRestPosition(currentCheckPoint);
     d88:	0e 94 d4 05 	call	0xba8	; 0xba8 <goToRestPosition>
     d8c:	96 c0       	rjmp	.+300    	; 0xeba <goToCheckPoint+0x146>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     d8e:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     d90:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     d92:	82 b9       	out	0x02, r24	; 2
     d94:	c0 e0       	ldi	r28, 0x00	; 0
     d96:	d0 e0       	ldi	r29, 0x00	; 0
     d98:	70 e7       	ldi	r23, 0x70	; 112
     d9a:	e7 2e       	mov	r14, r23
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	f7 2e       	mov	r15, r23

	stop();
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     da6:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     db0:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     dba:	80 93 6f 03 	sts	0x036F, r24

		flag=0;
     dbe:	10 92 6c 03 	sts	0x036C, r1

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     dc8:	80 93 80 03 	sts	0x0380, r24
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     dd2:	80 93 80 03 	sts	0x0380, r24
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     ddc:	80 93 80 03 	sts	0x0380, r24
     de0:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     de4:	88 32       	cpi	r24, 0x28	; 40
     de6:	08 f1       	brcs	.+66     	; 0xe2a <goToCheckPoint+0xb6>
     de8:	50 c0       	rjmp	.+160    	; 0xe8a <goToCheckPoint+0x116>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     dea:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     dee:	88 32       	cpi	r24, 0x28	; 40
     df0:	e0 f0       	brcs	.+56     	; 0xe2a <goToCheckPoint+0xb6>
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
		{
			
			if (checkpointFound==0)
     df2:	20 97       	sbiw	r28, 0x00	; 0
     df4:	99 f5       	brne	.+102    	; 0xe5c <goToCheckPoint+0xe8>
			{
				checkpointFound=1;
				currentCheckPoint++;
     df6:	1f 5f       	subi	r17, 0xFF	; 255
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     df8:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     dfa:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     dfc:	82 b9       	out	0x02, r24	; 2
{
	DDRC = DDRC | 0x08;
}
void buzzer_on(void)
{
	PORTC = PORTC | 0x08;
     dfe:	43 9a       	sbi	0x08, 3	; 8
     e00:	88 e8       	ldi	r24, 0x88	; 136
     e02:	93 e1       	ldi	r25, 0x13	; 19
     e04:	f7 01       	movw	r30, r14
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	f1 f7       	brne	.-4      	; 0xe06 <goToCheckPoint+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0c:	d9 f7       	brne	.-10     	; 0xe04 <goToCheckPoint+0x90>
}
void buzzer_off(void)
{
	PORTC = PORTC & ~(0x08);
     e0e:	43 98       	cbi	0x08, 3	; 8
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e10:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e12:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e14:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e16:	82 b9       	out	0x02, r24	; 2
					buzzer_on();
					_delay_ms(500);
					buzzer_off();
					forward();

				if(checkpointToProcess==currentCheckPoint)
     e18:	01 17       	cp	r16, r17
     e1a:	19 f0       	breq	.+6      	; 0xe22 <goToCheckPoint+0xae>
     e1c:	c1 e0       	ldi	r28, 0x01	; 1
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
     e20:	27 c0       	rjmp	.+78     	; 0xe70 <goToCheckPoint+0xfc>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e22:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e24:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     e26:	82 b9       	out	0x02, r24	; 2
     e28:	48 c0       	rjmp	.+144    	; 0xeba <goToCheckPoint+0x146>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     e2a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e2e:	88 32       	cpi	r24, 0x28	; 40
     e30:	20 f4       	brcc	.+8      	; 0xe3a <goToCheckPoint+0xc6>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     e32:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e36:	88 32       	cpi	r24, 0x28	; 40
     e38:	70 f5       	brcc	.+92     	; 0xe96 <goToCheckPoint+0x122>
		{
			forward();
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     e3a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e3e:	88 32       	cpi	r24, 0x28	; 40
     e40:	68 f0       	brcs	.+26     	; 0xe5c <goToCheckPoint+0xe8>
     e42:	36 c0       	rjmp	.+108    	; 0xeb0 <goToCheckPoint+0x13c>
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			flag=1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 6c 03 	sts	0x036C, r24
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e4a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e4c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e4e:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e50:	82 b9       	out	0x02, r24	; 2
			forward();
			velocity(lowSpeed,normalSpeed);
     e52:	80 91 53 02 	lds	r24, 0x0253
     e56:	90 91 51 02 	lds	r25, 0x0251
     e5a:	25 c0       	rjmp	.+74     	; 0xea6 <goToCheckPoint+0x132>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e5c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e5e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e60:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e62:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else //if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
		{
			forward();
			velocity(normalSpeed,normalSpeed);
     e64:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e68:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     e6c:	80 93 2a 01 	sts	0x012A, r24
		//End of white line or bot out of track
		//if(!isFollowLine(Center_white_line) && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//end stop(b-b-b)
		//{
			//velocity(0,0);
		//}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
     e70:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e74:	88 32       	cpi	r24, 0x28	; 40
     e76:	08 f0       	brcs	.+2      	; 0xe7a <goToCheckPoint+0x106>
     e78:	93 cf       	rjmp	.-218    	; 0xda0 <goToCheckPoint+0x2c>
		//End of white line or bot out of track
		//if(!isFollowLine(Center_white_line) && !isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))//end stop(b-b-b)
		//{
			//velocity(0,0);
		//}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
     e7a:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e7e:	88 32       	cpi	r24, 0x28	; 40
     e80:	08 f0       	brcs	.+2      	; 0xe84 <goToCheckPoint+0x110>
     e82:	8e cf       	rjmp	.-228    	; 0xda0 <goToCheckPoint+0x2c>
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	d0 e0       	ldi	r29, 0x00	; 0
     e88:	8b cf       	rjmp	.-234    	; 0xda0 <goToCheckPoint+0x2c>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     e8a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     e8e:	88 32       	cpi	r24, 0x28	; 40
     e90:	08 f4       	brcc	.+2      	; 0xe94 <goToCheckPoint+0x120>
     e92:	ab cf       	rjmp	.-170    	; 0xdea <goToCheckPoint+0x76>
     e94:	ae cf       	rjmp	.-164    	; 0xdf2 <goToCheckPoint+0x7e>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     e96:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     e98:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     e9a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     e9c:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			forward();
			velocity(normalSpeed,lowSpeed);
     e9e:	80 91 51 02 	lds	r24, 0x0251
     ea2:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ea6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     eaa:	90 93 2a 01 	sts	0x012A, r25
     eae:	e0 cf       	rjmp	.-64     	; 0xe70 <goToCheckPoint+0xfc>
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     eb0:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     eb4:	88 32       	cpi	r24, 0x28	; 40
     eb6:	30 f2       	brcs	.-116    	; 0xe44 <goToCheckPoint+0xd0>
     eb8:	d1 cf       	rjmp	.-94     	; 0xe5c <goToCheckPoint+0xe8>
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
		{
			checkpointFound=0;
		}
	}
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	08 95       	ret

00000ec8 <goToLineLane>:
	}
}
*/

void goToLineLane(unsigned char currentCheckPoint, unsigned char linePointToStop)
{
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	06 2f       	mov	r16, r22
	currentCheckPoint++;
     ed6:	18 2f       	mov	r17, r24
     ed8:	1f 5f       	subi	r17, 0xFF	; 255
	velocity(normalSpeed,normalSpeed);
     eda:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ede:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     ee2:	80 93 2a 01 	sts	0x012A, r24
	forward_mm(botLength);
     ee6:	80 91 55 02 	lds	r24, 0x0255
     eea:	90 91 56 02 	lds	r25, 0x0256
     eee:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
	right_degrees(135);
     ef2:	87 e8       	ldi	r24, 0x87	; 135
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
	right_upto_follow_line();
     efa:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     efe:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f00:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f02:	82 b9       	out	0x02, r24	; 2
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	e0 e7       	ldi	r30, 0x70	; 112
     f0a:	ee 2e       	mov	r14, r30
     f0c:	e1 e0       	ldi	r30, 0x01	; 1
     f0e:	fe 2e       	mov	r15, r30

	int checkPointFound=0;
	stop();
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f16:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f20:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f2a:	80 93 6f 03 	sts	0x036F, r24

		flag=0;
     f2e:	10 92 6c 03 	sts	0x036C, r1

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f38:	80 93 80 03 	sts	0x0380, r24
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f42:	80 93 80 03 	sts	0x0380, r24
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
     f4c:	80 93 80 03 	sts	0x0380, r24
     f50:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     f54:	88 32       	cpi	r24, 0x28	; 40
     f56:	08 f4       	brcc	.+2      	; 0xf5a <goToLineLane+0x92>
     f58:	40 c0       	rjmp	.+128    	; 0xfda <goToLineLane+0x112>
     f5a:	6c c0       	rjmp	.+216    	; 0x1034 <goToLineLane+0x16c>
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
     f5c:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     f60:	88 32       	cpi	r24, 0x28	; 40
     f62:	d8 f1       	brcs	.+118    	; 0xfda <goToLineLane+0x112>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
		{
			if (checkPointFound==0)
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	09 f0       	breq	.+2      	; 0xf6a <goToLineLane+0xa2>
     f68:	4e c0       	rjmp	.+156    	; 0x1006 <goToLineLane+0x13e>
			{
				checkPointFound=1;
				currentCheckPoint--;
     f6a:	11 50       	subi	r17, 0x01	; 1
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f6c:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f6e:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f70:	82 b9       	out	0x02, r24	; 2
{
	DDRC = DDRC | 0x08;
}
void buzzer_on(void)
{
	PORTC = PORTC | 0x08;
     f72:	43 9a       	sbi	0x08, 3	; 8
     f74:	88 e8       	ldi	r24, 0x88	; 136
     f76:	93 e1       	ldi	r25, 0x13	; 19
     f78:	f7 01       	movw	r30, r14
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <goToLineLane+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	d9 f7       	brne	.-10     	; 0xf78 <goToLineLane+0xb0>
}
void buzzer_off(void)
{
	PORTC = PORTC & ~(0x08);
     f82:	43 98       	cbi	0x08, 3	; 8
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f84:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f86:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     f88:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     f8a:	82 b9       	out	0x02, r24	; 2
				stop();
				buzzer_on();
				_delay_ms(500);
				buzzer_off();
				forward();
				if(currentCheckPoint==0)
     f8c:	11 23       	and	r17, r17
     f8e:	19 f0       	breq	.+6      	; 0xf96 <goToLineLane+0xce>
     f90:	c1 e0       	ldi	r28, 0x01	; 1
     f92:	d0 e0       	ldi	r29, 0x00	; 0
     f94:	42 c0       	rjmp	.+132    	; 0x101a <goToLineLane+0x152>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     f96:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     f98:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     f9a:	82 b9       	out	0x02, r24	; 2
				{
					stop();
					forward_mm(botLength);
     f9c:	80 91 55 02 	lds	r24, 0x0255
     fa0:	90 91 56 02 	lds	r25, 0x0256
     fa4:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
					if(linePointToStop==0)
     fa8:	00 23       	and	r16, r16
     faa:	39 f4       	brne	.+14     	; 0xfba <goToLineLane+0xf2>
					{
						left_degrees(45);
     fac:	8d e2       	ldi	r24, 0x2D	; 45
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <left_degrees>
						left_upto_follow_line();
     fb4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <left_upto_follow_line>
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <goToLineLane+0xfe>
					}
					else
					{
						right_degrees(45);
     fba:	8d e2       	ldi	r24, 0x2D	; 45
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
						right_upto_follow_line();
     fc2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     fc6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     fc8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
     fca:	82 b9       	out	0x02, r24	; 2
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
		{
			checkPointFound=0;
		}
	}	
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     fda:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     fde:	88 32       	cpi	r24, 0x28	; 40
     fe0:	20 f4       	brcc	.+8      	; 0xfea <goToLineLane+0x122>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
     fe2:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     fe6:	88 32       	cpi	r24, 0x28	; 40
     fe8:	58 f5       	brcc	.+86     	; 0x1040 <goToLineLane+0x178>
		{
			forward();
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
     fea:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
     fee:	88 32       	cpi	r24, 0x28	; 40
     ff0:	50 f0       	brcs	.+20     	; 0x1006 <goToLineLane+0x13e>
     ff2:	33 c0       	rjmp	.+102    	; 0x105a <goToLineLane+0x192>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     ff4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     ff6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     ff8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
     ffa:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			forward();
			velocity(lowSpeed,normalSpeed);
     ffc:	80 91 53 02 	lds	r24, 0x0253
    1000:	90 91 51 02 	lds	r25, 0x0251
    1004:	25 c0       	rjmp	.+74     	; 0x1050 <goToLineLane+0x188>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1006:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1008:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    100a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    100c:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else //if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
		{
			forward();
			velocity(normalSpeed,normalSpeed);
    100e:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1012:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1016:	80 93 2a 01 	sts	0x012A, r24
			//checkPointFound=0;
		}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
    101a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    101e:	88 32       	cpi	r24, 0x28	; 40
    1020:	08 f0       	brcs	.+2      	; 0x1024 <goToLineLane+0x15c>
    1022:	76 cf       	rjmp	.-276    	; 0xf10 <goToLineLane+0x48>
		{
			forward();
			velocity(normalSpeed,normalSpeed);
			//checkPointFound=0;
		}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
    1024:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    1028:	88 32       	cpi	r24, 0x28	; 40
    102a:	08 f0       	brcs	.+2      	; 0x102e <goToLineLane+0x166>
    102c:	71 cf       	rjmp	.-286    	; 0xf10 <goToLineLane+0x48>
    102e:	c0 e0       	ldi	r28, 0x00	; 0
    1030:	d0 e0       	ldi	r29, 0x00	; 0
    1032:	6e cf       	rjmp	.-292    	; 0xf10 <goToLineLane+0x48>
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
    1034:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    1038:	88 32       	cpi	r24, 0x28	; 40
    103a:	08 f4       	brcc	.+2      	; 0x103e <goToLineLane+0x176>
    103c:	8f cf       	rjmp	.-226    	; 0xf5c <goToLineLane+0x94>
    103e:	92 cf       	rjmp	.-220    	; 0xf64 <goToLineLane+0x9c>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1040:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1042:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1044:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    1046:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			forward();
			velocity(normalSpeed,lowSpeed);
    1048:	80 91 51 02 	lds	r24, 0x0251
    104c:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1050:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1054:	90 93 2a 01 	sts	0x012A, r25
    1058:	e0 cf       	rjmp	.-64     	; 0x101a <goToLineLane+0x152>
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
    105a:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    105e:	88 32       	cpi	r24, 0x28	; 40
    1060:	48 f2       	brcs	.-110    	; 0xff4 <goToLineLane+0x12c>
    1062:	d1 cf       	rjmp	.-94     	; 0x1006 <goToLineLane+0x13e>

00001064 <goToLine>:
	}	
}


void goToLine(unsigned char oldLinePoint,unsigned char linePointToStop, unsigned char currentCheckPoint)
{
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	18 2f       	mov	r17, r24
    1074:	f6 2e       	mov	r15, r22
	if(oldLinePoint!=0)
    1076:	88 23       	and	r24, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <goToLine+0x1c>
	{
		goToLineLane(currentCheckPoint,linePointToStop);
    107a:	84 2f       	mov	r24, r20
    107c:	0e 94 64 07 	call	0xec8	; 0xec8 <goToLineLane>
	}
	
	int currentLinePoint=oldLinePoint;
    1080:	c1 2f       	mov	r28, r17
    1082:	d0 e0       	ldi	r29, 0x00	; 0
	if(linePointToStop==0)
    1084:	ff 20       	and	r15, r15
    1086:	c9 f4       	brne	.+50     	; 0x10ba <goToLine+0x56>
	{
		currentLinePoint--;
    1088:	21 97       	sbiw	r28, 0x01	; 1
		if(currentLinePoint==0)
    108a:	b9 f4       	brne	.+46     	; 0x10ba <goToLine+0x56>
		{
			forward_mm(botLength*4);
    108c:	80 91 55 02 	lds	r24, 0x0255
    1090:	90 91 56 02 	lds	r25, 0x0256
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10a0:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10a2:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10a4:	82 b9       	out	0x02, r24	; 2
    10a6:	80 e1       	ldi	r24, 0x10	; 16
    10a8:	97 e2       	ldi	r25, 0x27	; 39
    10aa:	20 e7       	ldi	r18, 0x70	; 112
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	f9 01       	movw	r30, r18
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <goToLine+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b6:	d9 f7       	brne	.-10     	; 0x10ae <goToLine+0x4a>
    10b8:	51 c0       	rjmp	.+162    	; 0x115c <goToLine+0xf8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    10ba:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    10bc:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    10be:	82 b9       	out	0x02, r24	; 2
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	10 e0       	ldi	r17, 0x00	; 0
					//buzzer_on();
					//_delay_ms(500);
					//buzzer_off();
					//forward();
					currentLinePoint++;
					if(linePointToStop==currentLinePoint)
    10c4:	cf 2c       	mov	r12, r15
    10c6:	dd 24       	eor	r13, r13

	int linePointFound=0;
	stop();
	while(1)	
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    10ce:	80 93 6d 03 	sts	0x036D, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    10d8:	80 93 6e 03 	sts	0x036E, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    10e2:	80 93 6f 03 	sts	0x036F, r24

		flag=0;
    10e6:	10 92 6c 03 	sts	0x036C, r1

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
	
	ADC_Value = ADC_Conversion(channel);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    10f0:	80 93 80 03 	sts	0x0380, r24
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    10fa:	80 93 80 03 	sts	0x0380, r24
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    1104:	80 93 80 03 	sts	0x0380, r24
    1108:	80 91 6e 03 	lds	r24, 0x036E
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    110c:	88 32       	cpi	r24, 0x28	; 40
    110e:	08 f4       	brcc	.+2      	; 0x1112 <goToLine+0xae>
    1110:	5c c0       	rjmp	.+184    	; 0x11ca <goToLine+0x166>
    1112:	8b c0       	rjmp	.+278    	; 0x122a <goToLine+0x1c6>
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
    1114:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    1118:	88 32       	cpi	r24, 0x28	; 40
    111a:	08 f4       	brcc	.+2      	; 0x111e <goToLine+0xba>
    111c:	56 c0       	rjmp	.+172    	; 0x11ca <goToLine+0x166>
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
		{
			
			if (linePointFound==0)
    111e:	01 15       	cp	r16, r1
    1120:	11 05       	cpc	r17, r1
    1122:	09 f0       	breq	.+2      	; 0x1126 <goToLine+0xc2>
    1124:	68 c0       	rjmp	.+208    	; 0x11f6 <goToLine+0x192>
				//buzzer_on();
				//_delay_ms(500);
				//buzzer_off();
				//forward();
				linePointFound=1;
				if(linePointToStop==0)
    1126:	ff 20       	and	r15, r15
    1128:	19 f5       	brne	.+70     	; 0x1170 <goToLine+0x10c>
				{
					currentLinePoint--;
    112a:	21 97       	sbiw	r28, 0x01	; 1
					if(linePointToStop==currentLinePoint)
    112c:	09 f0       	breq	.+2      	; 0x1130 <goToLine+0xcc>
    112e:	6e c0       	rjmp	.+220    	; 0x120c <goToLine+0x1a8>
					{
						forward_mm(botLength*4);
    1130:	80 91 55 02 	lds	r24, 0x0255
    1134:	90 91 56 02 	lds	r25, 0x0256
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1144:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1146:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1148:	82 b9       	out	0x02, r24	; 2
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	97 e2       	ldi	r25, 0x27	; 39
    114e:	20 e7       	ldi	r18, 0x70	; 112
    1150:	31 e0       	ldi	r19, 0x01	; 1
    1152:	f9 01       	movw	r30, r18
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <goToLine+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	d9 f7       	brne	.-10     	; 0x1152 <goToLine+0xee>
						stop();
						_delay_ms(1000);
						right_degrees(135);
    115c:	87 e8       	ldi	r24, 0x87	; 135
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
						right_upto_follow_line();
    1164:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1168:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    116a:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    116c:	82 b9       	out	0x02, r24	; 2
    116e:	75 c0       	rjmp	.+234    	; 0x125a <goToLine+0x1f6>
					//stop();
					//buzzer_on();
					//_delay_ms(500);
					//buzzer_off();
					//forward();
					currentLinePoint++;
    1170:	21 96       	adiw	r28, 0x01	; 1
					if(linePointToStop==currentLinePoint)
    1172:	cc 16       	cp	r12, r28
    1174:	dd 06       	cpc	r13, r29
    1176:	09 f0       	breq	.+2      	; 0x117a <goToLine+0x116>
    1178:	49 c0       	rjmp	.+146    	; 0x120c <goToLine+0x1a8>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    117a:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    117c:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    117e:	82 b9       	out	0x02, r24	; 2
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1180:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1182:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1184:	82 b9       	out	0x02, r24	; 2
			linePointFound=0;
		}
	}		
	stop();
	//velocity(lowSpeed,lowSpeed);
	forward_mm(botLength);
    1186:	80 91 55 02 	lds	r24, 0x0255
    118a:	90 91 56 02 	lds	r25, 0x0256
    118e:	0e 94 bd 03 	call	0x77a	; 0x77a <forward_mm>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1192:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1194:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
    1196:	82 b9       	out	0x02, r24	; 2
    1198:	80 e1       	ldi	r24, 0x10	; 16
    119a:	97 e2       	ldi	r25, 0x27	; 39
    119c:	20 e7       	ldi	r18, 0x70	; 112
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	f9 01       	movw	r30, r18
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <goToLine+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a8:	d9 f7       	brne	.-10     	; 0x11a0 <goToLine+0x13c>
	stop();
	//velocity(normalSpeed,normalSpeed);
	_delay_ms(1000);
	right_degrees(45);
    11aa:	8d e2       	ldi	r24, 0x2D	; 45
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
	right_upto_follow_line();
    11b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
    11b6:	80 e1       	ldi	r24, 0x10	; 16
    11b8:	97 e2       	ldi	r25, 0x27	; 39
    11ba:	20 e7       	ldi	r18, 0x70	; 112
    11bc:	31 e0       	ldi	r19, 0x01	; 1
    11be:	f9 01       	movw	r30, r18
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <goToLine+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	d9 f7       	brne	.-10     	; 0x11be <goToLine+0x15a>
    11c8:	48 c0       	rjmp	.+144    	; 0x125a <goToLine+0x1f6>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
    11ca:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    11ce:	88 32       	cpi	r24, 0x28	; 40
    11d0:	20 f4       	brcc	.+8      	; 0x11da <goToLine+0x176>
				forward();
				velocity(normalSpeed,normalSpeed);
			}
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
    11d2:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    11d6:	88 32       	cpi	r24, 0x28	; 40
    11d8:	70 f5       	brcc	.+92     	; 0x1236 <goToLine+0x1d2>
		{
			forward();
			velocity(normalSpeed,lowSpeed);
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
    11da:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    11de:	88 32       	cpi	r24, 0x28	; 40
    11e0:	50 f0       	brcs	.+20     	; 0x11f6 <goToLine+0x192>
    11e2:	36 c0       	rjmp	.+108    	; 0x1250 <goToLine+0x1ec>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11e4:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11e6:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11e8:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11ea:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
		{
			forward();
			velocity(lowSpeed,normalSpeed);
    11ec:	80 91 53 02 	lds	r24, 0x0253
    11f0:	90 91 51 02 	lds	r25, 0x0251
    11f4:	28 c0       	rjmp	.+80     	; 0x1246 <goToLine+0x1e2>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    11f6:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    11f8:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    11fa:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    11fc:	82 b9       	out	0x02, r24	; 2
		}
		// center is on follow line
		else// if(isFollowLine(Center_white_line))//center(just start when 0-w-0)
		{
			forward();
			velocity(normalSpeed,normalSpeed);
    11fe:	80 91 51 02 	lds	r24, 0x0251
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1202:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    1206:	80 93 2a 01 	sts	0x012A, r24
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <goToLine+0x1ac>
    120c:	01 e0       	ldi	r16, 0x01	; 1
    120e:	10 e0       	ldi	r17, 0x00	; 0
			//linePointFound=0;
		}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
    1210:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    1214:	88 32       	cpi	r24, 0x28	; 40
    1216:	08 f0       	brcs	.+2      	; 0x121a <goToLine+0x1b6>
    1218:	57 cf       	rjmp	.-338    	; 0x10c8 <goToLine+0x64>
		{
			forward();
			velocity(normalSpeed,normalSpeed);
			//linePointFound=0;
		}
		if(!isFollowLine(Left_white_line) && !isFollowLine(Right_white_line))
    121a:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    121e:	88 32       	cpi	r24, 0x28	; 40
    1220:	08 f0       	brcs	.+2      	; 0x1224 <goToLine+0x1c0>
    1222:	52 cf       	rjmp	.-348    	; 0x10c8 <goToLine+0x64>
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	4f cf       	rjmp	.-354    	; 0x10c8 <goToLine+0x64>
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	
		//checkpointFound
		if(isFollowLine(Center_white_line) && (isFollowLine(Left_white_line) || isFollowLine(Right_white_line))) //checkpoint-(w-w-w)
    122a:	80 91 6d 03 	lds	r24, 0x036D
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    122e:	88 32       	cpi	r24, 0x28	; 40
    1230:	08 f4       	brcc	.+2      	; 0x1234 <goToLine+0x1d0>
    1232:	70 cf       	rjmp	.-288    	; 0x1114 <goToLine+0xb0>
    1234:	74 cf       	rjmp	.-280    	; 0x111e <goToLine+0xba>
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
    1236:	82 b1       	in	r24, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1238:	80 7f       	andi	r24, 0xF0	; 240
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    123a:	86 60       	ori	r24, 0x06	; 6
 PORTA = PortARestore; 		// executing the command
    123c:	82 b9       	out	0x02, r24	; 2
		}
		// bot has slipped left
		else if(!isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && isFollowLine(Right_white_line))//flag=0 => -b- here(b-b-0)
		{
			forward();
			velocity(normalSpeed,lowSpeed);
    123e:	80 91 51 02 	lds	r24, 0x0251
    1242:	90 91 53 02 	lds	r25, 0x0253
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1246:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    124a:	90 93 2a 01 	sts	0x012A, r25
    124e:	e0 cf       	rjmp	.-64     	; 0x1210 <goToLine+0x1ac>
		}
		// bot has slipped right
		else if(isFollowLine(Left_white_line) /*&& !isFollowLine(Center_white_line)*/ && !isFollowLine(Right_white_line))//flag=0 => -b- here(0-b-b)
    1250:	80 91 6f 03 	lds	r24, 0x036F
*/


int isFollowLine(unsigned char line)
{
	if(line<0x28)
    1254:	88 32       	cpi	r24, 0x28	; 40
    1256:	30 f2       	brcs	.-116    	; 0x11e4 <goToLine+0x180>
    1258:	ce cf       	rjmp	.-100    	; 0x11f6 <goToLine+0x192>
	//velocity(normalSpeed,normalSpeed);
	_delay_ms(1000);
	right_degrees(45);
	right_upto_follow_line();
	_delay_ms(1000);
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	08 95       	ret

0000126a <getSensorValue>:
unsigned char getSensorValue()
{
    126a:	1f 93       	push	r17
	unsigned char val = ADC_Conversion(14);
    126c:	8e e0       	ldi	r24, 0x0E	; 14
    126e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <ADC_Conversion>
    1272:	18 2f       	mov	r17, r24
	lcd_print(2,1,val,3);
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	41 2f       	mov	r20, r17
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	23 e0       	ldi	r18, 0x03	; 3
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
	return val;
}
    1284:	81 2f       	mov	r24, r17
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret

0000128a <servo_dig_in>:

void servo_dig_in()
{
	servo_2(105);
    128a:	89 e6       	ldi	r24, 0x69	; 105
    128c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <servo_2>
}
    1290:	08 95       	ret

00001292 <servo_dig_out>:

void servo_dig_out()
{
	servo_2(170);
    1292:	8a ea       	ldi	r24, 0xAA	; 170
    1294:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <servo_2>
}
    1298:	08 95       	ret

0000129a <sense>:


unsigned int sense()
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <sense+0xa>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <sense+0xc>
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	int i,j,t;
	unsigned int median[3];
	servo_dig_in();
    12aa:	0e 94 45 09 	call	0x128a	; 0x128a <servo_dig_in>
    12ae:	88 e9       	ldi	r24, 0x98	; 152
    12b0:	9a e3       	ldi	r25, 0x3A	; 58
    12b2:	20 e7       	ldi	r18, 0x70	; 112
    12b4:	31 e0       	ldi	r19, 0x01	; 1
    12b6:	f9 01       	movw	r30, r18
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <sense+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <sense+0x1c>
	_delay_ms(1500);
	median[0]=(unsigned int)getSensorValue();
    12c0:	0e 94 35 09 	call	0x126a	; 0x126a <getSensorValue>
    12c4:	18 2f       	mov	r17, r24
    12c6:	88 e9       	ldi	r24, 0x98	; 152
    12c8:	9a e3       	ldi	r25, 0x3A	; 58
    12ca:	20 e7       	ldi	r18, 0x70	; 112
    12cc:	31 e0       	ldi	r19, 0x01	; 1
    12ce:	f9 01       	movw	r30, r18
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <sense+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	d9 f7       	brne	.-10     	; 0x12ce <sense+0x34>
	_delay_ms(1500);
	median[1]=(unsigned int)getSensorValue();
    12d8:	0e 94 35 09 	call	0x126a	; 0x126a <getSensorValue>
    12dc:	28 e9       	ldi	r18, 0x98	; 152
    12de:	3a e3       	ldi	r19, 0x3A	; 58
    12e0:	40 e7       	ldi	r20, 0x70	; 112
    12e2:	51 e0       	ldi	r21, 0x01	; 1
    12e4:	fa 01       	movw	r30, r20
    12e6:	31 97       	sbiw	r30, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <sense+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	21 50       	subi	r18, 0x01	; 1
    12ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ee:	d1 f7       	brne	.-12     	; 0x12e4 <sense+0x4a>
{
	int i,j,t;
	unsigned int median[3];
	servo_dig_in();
	_delay_ms(1500);
	median[0]=(unsigned int)getSensorValue();
    12f0:	19 83       	std	Y+1, r17	; 0x01
    12f2:	1a 82       	std	Y+2, r1	; 0x02
	_delay_ms(1500);
	median[1]=(unsigned int)getSensorValue();
    12f4:	8b 83       	std	Y+3, r24	; 0x03
    12f6:	1c 82       	std	Y+4, r1	; 0x04
	_delay_ms(1500);
	median[2]=(unsigned int)getSensorValue();
    12f8:	0e 94 35 09 	call	0x126a	; 0x126a <getSensorValue>
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	1e 82       	std	Y+6, r1	; 0x06
	servo_dig_out();
    1300:	0e 94 49 09 	call	0x1292	; 0x1292 <servo_dig_out>
    1304:	de 01       	movw	r26, r28
    1306:	11 96       	adiw	r26, 0x01	; 1
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0

	for(i=0;i<3;i++)
		for(j=i+1;j<3;j++)
    130c:	8d 01       	movw	r16, r26
    130e:	bc 01       	movw	r22, r24
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	fb 01       	movw	r30, r22
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	e0 0f       	add	r30, r16
    131c:	f1 1f       	adc	r31, r17
    131e:	9b 01       	movw	r18, r22
    1320:	10 c0       	rjmp	.+32     	; 0x1342 <sense+0xa8>
		{
			if(median[i] > median[j])
    1322:	4d 91       	ld	r20, X+
    1324:	5c 91       	ld	r21, X
    1326:	11 97       	sbiw	r26, 0x01	; 1
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	28 f4       	brcc	.+10     	; 0x133c <sense+0xa2>
			{
				t=median[i];
				median[i]=median[j];
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	9c 93       	st	X, r25
    1336:	8e 93       	st	-X, r24
				median[j]=t;
    1338:	51 83       	std	Z+1, r21	; 0x01
    133a:	40 83       	st	Z, r20
	_delay_ms(1500);
	median[2]=(unsigned int)getSensorValue();
	servo_dig_out();

	for(i=0;i<3;i++)
		for(j=i+1;j<3;j++)
    133c:	2f 5f       	subi	r18, 0xFF	; 255
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	32 96       	adiw	r30, 0x02	; 2
    1342:	23 30       	cpi	r18, 0x03	; 3
    1344:	31 05       	cpc	r19, r1
    1346:	6c f3       	brlt	.-38     	; 0x1322 <sense+0x88>
    1348:	12 96       	adiw	r26, 0x02	; 2
    134a:	cb 01       	movw	r24, r22
	median[1]=(unsigned int)getSensorValue();
	_delay_ms(1500);
	median[2]=(unsigned int)getSensorValue();
	servo_dig_out();

	for(i=0;i<3;i++)
    134c:	63 30       	cpi	r22, 0x03	; 3
    134e:	71 05       	cpc	r23, r1
    1350:	f1 f6       	brne	.-68     	; 0x130e <sense+0x74>
				median[i]=median[j];
				median[j]=t;
			}
		}
	return median[1];
}
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <senseTrough>:

unsigned char senseTrough(unsigned char dir)
{
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
	unsigned int moistVal = 0;
	if ( dir == 'r' )
    1374:	82 37       	cpi	r24, 0x72	; 114
    1376:	09 f0       	breq	.+2      	; 0x137a <senseTrough+0xe>
    1378:	52 c0       	rjmp	.+164    	; 0x141e <senseTrough+0xb2>
	{
		right_degrees(85);
    137a:	85 e5       	ldi	r24, 0x55	; 85
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	97 e2       	ldi	r25, 0x27	; 39
    1386:	20 e7       	ldi	r18, 0x70	; 112
    1388:	31 e0       	ldi	r19, 0x01	; 1
    138a:	f9 01       	movw	r30, r18
    138c:	31 97       	sbiw	r30, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <senseTrough+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1392:	d9 f7       	brne	.-10     	; 0x138a <senseTrough+0x1e>
		_delay_ms(1000);
			moistVal = sense();
    1394:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    1398:	8c 01       	movw	r16, r24
    139a:	80 e1       	ldi	r24, 0x10	; 16
    139c:	97 e2       	ldi	r25, 0x27	; 39
    139e:	20 e7       	ldi	r18, 0x70	; 112
    13a0:	31 e0       	ldi	r19, 0x01	; 1
    13a2:	f9 01       	movw	r30, r18
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <senseTrough+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	d9 f7       	brne	.-10     	; 0x13a2 <senseTrough+0x36>
		_delay_ms(1000);
		right_degrees(5);
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
    13b4:	80 e1       	ldi	r24, 0x10	; 16
    13b6:	97 e2       	ldi	r25, 0x27	; 39
    13b8:	20 e7       	ldi	r18, 0x70	; 112
    13ba:	31 e0       	ldi	r19, 0x01	; 1
    13bc:	f9 01       	movw	r30, r18
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <senseTrough+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	d9 f7       	brne	.-10     	; 0x13bc <senseTrough+0x50>
		_delay_ms(1000);
			moistVal += sense();
    13c6:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    13ca:	ec 01       	movw	r28, r24
    13cc:	80 e1       	ldi	r24, 0x10	; 16
    13ce:	97 e2       	ldi	r25, 0x27	; 39
    13d0:	20 e7       	ldi	r18, 0x70	; 112
    13d2:	31 e0       	ldi	r19, 0x01	; 1
    13d4:	f9 01       	movw	r30, r18
    13d6:	31 97       	sbiw	r30, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <senseTrough+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	d9 f7       	brne	.-10     	; 0x13d4 <senseTrough+0x68>
		_delay_ms(1000);
		right_degrees(5);
    13de:	85 e0       	ldi	r24, 0x05	; 5
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <right_degrees>
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	97 e2       	ldi	r25, 0x27	; 39
    13ea:	20 e7       	ldi	r18, 0x70	; 112
    13ec:	31 e0       	ldi	r19, 0x01	; 1
    13ee:	f9 01       	movw	r30, r18
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <senseTrough+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f6:	d9 f7       	brne	.-10     	; 0x13ee <senseTrough+0x82>
		_delay_ms(1000);
			moistVal += sense();
    13f8:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    13fc:	20 e1       	ldi	r18, 0x10	; 16
    13fe:	37 e2       	ldi	r19, 0x27	; 39
    1400:	40 e7       	ldi	r20, 0x70	; 112
    1402:	51 e0       	ldi	r21, 0x01	; 1
    1404:	fa 01       	movw	r30, r20
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <senseTrough+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	d1 f7       	brne	.-12     	; 0x1404 <senseTrough+0x98>
		_delay_ms(1000);
			moistVal = sense();
		_delay_ms(1000);
		right_degrees(5);
		_delay_ms(1000);
			moistVal += sense();
    1410:	c0 0f       	add	r28, r16
    1412:	d1 1f       	adc	r29, r17
		_delay_ms(1000);
		right_degrees(5);
		_delay_ms(1000);
			moistVal += sense();
    1414:	c8 0f       	add	r28, r24
    1416:	d9 1f       	adc	r29, r25
		_delay_ms(1000);
		left_upto_follow_line();
    1418:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <left_upto_follow_line>
    141c:	51 c0       	rjmp	.+162    	; 0x14c0 <senseTrough+0x154>

	}
	else
	{
		
		left_degrees(85);
    141e:	85 e5       	ldi	r24, 0x55	; 85
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <left_degrees>
    1426:	80 e1       	ldi	r24, 0x10	; 16
    1428:	97 e2       	ldi	r25, 0x27	; 39
    142a:	20 e7       	ldi	r18, 0x70	; 112
    142c:	31 e0       	ldi	r19, 0x01	; 1
    142e:	f9 01       	movw	r30, r18
    1430:	31 97       	sbiw	r30, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <senseTrough+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1434:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1436:	d9 f7       	brne	.-10     	; 0x142e <senseTrough+0xc2>
		_delay_ms(1000);
			moistVal = sense();
    1438:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    143c:	8c 01       	movw	r16, r24
    143e:	80 e1       	ldi	r24, 0x10	; 16
    1440:	97 e2       	ldi	r25, 0x27	; 39
    1442:	20 e7       	ldi	r18, 0x70	; 112
    1444:	31 e0       	ldi	r19, 0x01	; 1
    1446:	f9 01       	movw	r30, r18
    1448:	31 97       	sbiw	r30, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <senseTrough+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	d9 f7       	brne	.-10     	; 0x1446 <senseTrough+0xda>
		_delay_ms(1000);
		left_degrees(5);
    1450:	85 e0       	ldi	r24, 0x05	; 5
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <left_degrees>
    1458:	80 e1       	ldi	r24, 0x10	; 16
    145a:	97 e2       	ldi	r25, 0x27	; 39
    145c:	20 e7       	ldi	r18, 0x70	; 112
    145e:	31 e0       	ldi	r19, 0x01	; 1
    1460:	f9 01       	movw	r30, r18
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <senseTrough+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1466:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	d9 f7       	brne	.-10     	; 0x1460 <senseTrough+0xf4>
		_delay_ms(1000);
			moistVal += sense();
    146a:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    146e:	ec 01       	movw	r28, r24
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	97 e2       	ldi	r25, 0x27	; 39
    1474:	20 e7       	ldi	r18, 0x70	; 112
    1476:	31 e0       	ldi	r19, 0x01	; 1
    1478:	f9 01       	movw	r30, r18
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <senseTrough+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	d9 f7       	brne	.-10     	; 0x1478 <senseTrough+0x10c>
		_delay_ms(1000);
		left_degrees(5);
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <left_degrees>
    148a:	80 e1       	ldi	r24, 0x10	; 16
    148c:	97 e2       	ldi	r25, 0x27	; 39
    148e:	20 e7       	ldi	r18, 0x70	; 112
    1490:	31 e0       	ldi	r19, 0x01	; 1
    1492:	f9 01       	movw	r30, r18
    1494:	31 97       	sbiw	r30, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <senseTrough+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149a:	d9 f7       	brne	.-10     	; 0x1492 <senseTrough+0x126>
		_delay_ms(1000);
			moistVal += sense();
    149c:	0e 94 4d 09 	call	0x129a	; 0x129a <sense>
    14a0:	20 e1       	ldi	r18, 0x10	; 16
    14a2:	37 e2       	ldi	r19, 0x27	; 39
    14a4:	40 e7       	ldi	r20, 0x70	; 112
    14a6:	51 e0       	ldi	r21, 0x01	; 1
    14a8:	fa 01       	movw	r30, r20
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <senseTrough+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <senseTrough+0x13c>
		_delay_ms(1000);
			moistVal = sense();
		_delay_ms(1000);
		left_degrees(5);
		_delay_ms(1000);
			moistVal += sense();
    14b4:	c0 0f       	add	r28, r16
    14b6:	d1 1f       	adc	r29, r17
		_delay_ms(1000);
		left_degrees(5);
		_delay_ms(1000);
			moistVal += sense();
    14b8:	c8 0f       	add	r28, r24
    14ba:	d9 1f       	adc	r29, r25
		_delay_ms(1000);
		right_upto_follow_line();
    14bc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <right_upto_follow_line>
    14c0:	ce 01       	movw	r24, r28
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0e 94 9b 11 	call	0x2336	; 0x2336 <__udivmodhi4>
    14ca:	86 2f       	mov	r24, r22
	}
	return (unsigned char)(moistVal/3);
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <init_devices>:

int lack=0;


void init_devices()
{
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
 	cli(); //Clears the global interrupts
    14da:	f8 94       	cli
}

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    14dc:	87 b1       	in	r24, 0x07	; 7
    14de:	87 6f       	ori	r24, 0xF7	; 247
    14e0:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    14e2:	88 b1       	in	r24, 0x08	; 8
    14e4:	80 78       	andi	r24, 0x80	; 128
    14e6:	88 b9       	out	0x08, r24	; 8
	lcd_port_config();
	lcd_init();
    14e8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
	lcd_cursor(2,1);
	lcd_string("                ");
}
void buzzer_pin_config(void)
{
	DDRC = DDRC | 0x08;
    14ec:	3b 9a       	sbi	0x07, 3	; 7


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
    14ee:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
    14f0:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
    14f2:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
    14f6:	10 92 08 01 	sts	0x0108, r1
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
    14fa:	81 b1       	in	r24, 0x01	; 1
    14fc:	8f 60       	ori	r24, 0x0F	; 15
    14fe:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
    1500:	82 b1       	in	r24, 0x02	; 2
    1502:	80 7f       	andi	r24, 0xF0	; 240
    1504:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1506:	ea e0       	ldi	r30, 0x0A	; 10
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	80 81       	ld	r24, Z
    150c:	88 61       	ori	r24, 0x18	; 24
    150e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1510:	eb e0       	ldi	r30, 0x0B	; 11
    1512:	f1 e0       	ldi	r31, 0x01	; 1
    1514:	80 81       	ld	r24, Z
    1516:	88 61       	ori	r24, 0x18	; 24
    1518:	80 83       	st	Z, r24


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    151a:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    151c:	74 9a       	sbi	0x0e, 4	; 14
}


void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
    151e:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1520:	ea e6       	ldi	r30, 0x6A	; 106
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	82 60       	ori	r24, 0x02	; 2
    1528:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    152a:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
    152c:	78 94       	sei
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    152e:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1530:	75 9a       	sbi	0x0e, 5	; 14
 sei();   // Enables the global interrupt 
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
    1532:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1534:	ea e6       	ldi	r30, 0x6A	; 106
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 60       	ori	r24, 0x08	; 8
    153c:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    153e:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
    1540:	78 94       	sei
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void adc_init()
{
	ADCSRA = 0x00;
    1542:	ea e7       	ldi	r30, 0x7A	; 122
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1548:	2b e7       	ldi	r18, 0x7B	; 123
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	d9 01       	movw	r26, r18
    154e:	1c 92       	st	X, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1550:	ac e7       	ldi	r26, 0x7C	; 124
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	80 e2       	ldi	r24, 0x20	; 32
    1556:	8c 93       	st	X, r24
	ACSR = 0x80;
    1558:	90 e8       	ldi	r25, 0x80	; 128
    155a:	90 bf       	out	0x30, r25	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    155c:	86 e8       	ldi	r24, 0x86	; 134
    155e:	80 83       	st	Z, r24


//Function to Initialize ADC
void adc_init_10bit()
{
	ADCSRA = 0x00;
    1560:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1562:	e9 01       	movw	r28, r18
    1564:	18 82       	st	Y, r1
	ADMUX = 0x00;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1566:	1c 92       	st	X, r1
	ACSR = 0x80;
    1568:	90 bf       	out	0x30, r25	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    156a:	80 83       	st	Z, r24
}

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    156c:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    156e:	2e 9a       	sbi	0x05, 6	; 5
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
    1570:	e1 e2       	ldi	r30, 0x21	; 33
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	90 93 25 01 	sts	0x0125, r25
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 24 01 	sts	0x0124, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1582:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1586:	90 93 28 01 	sts	0x0128, r25
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    158a:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    158e:	90 93 2a 01 	sts	0x012A, r25
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1592:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1596:	90 93 2c 01 	sts	0x012C, r25
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    159a:	89 ea       	ldi	r24, 0xA9	; 169
    159c:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    15a0:	8b e0       	ldi	r24, 0x0B	; 11
    15a2:	80 83       	st	Z, r24
 	right_position_encoder_interrupt_init();
	adc_init();
	adc_init_10bit();
	servo2_pin_config();
	timer5_init();
	timer1_init();
    15a4:	0e 94 01 02 	call	0x402	; 0x402 <timer1_init>


//Function To Initialize all The Devices
void init_zigbee()
{
 cli(); //Clears the global interrupts
    15a8:	f8 94       	cli
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    15aa:	e1 ec       	ldi	r30, 0xC1	; 193
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    15b0:	10 92 c0 00 	sts	0x00C0, r1
 UCSR0C = 0x06;
    15b4:	86 e0       	ldi	r24, 0x06	; 6
    15b6:	80 93 c2 00 	sts	0x00C2, r24
 UBRR0L = 0x5F; //set baud rate lo
    15ba:	8f e5       	ldi	r24, 0x5F	; 95
    15bc:	80 93 c4 00 	sts	0x00C4, r24
 UBRR0H = 0x00; //set baud rate hi
    15c0:	10 92 c5 00 	sts	0x00C5, r1
 UCSR0B = 0x98;
    15c4:	88 e9       	ldi	r24, 0x98	; 152
    15c6:	80 83       	st	Z, r24
//Function To Initialize all The Devices
void init_zigbee()
{
 cli(); //Clears the global interrupts
 uart0_init(); //Initailize UART1 for serial communiaction
 sei();   //Enables the global interrupts
    15c8:	78 94       	sei
	init_zigbee();
	//init_navigation();
	sei();   //Enables the global interrupts
    15ca:	78 94       	sei
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <main>:

int main()
{
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
	
	unsigned int flagOffset = 0;		// 1 => next location for same checkpoint
	//unsigned char olddistance=0;		// distance travelled so far after a checkpoint
	init_devices();
    15e0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <init_devices>
	servo_dig_out();
    15e4:	0e 94 49 09 	call	0x1292	; 0x1292 <servo_dig_out>
{
	DDRC = DDRC | 0x08;
}
void buzzer_on(void)
{
	PORTC = PORTC | 0x08;
    15e8:	43 9a       	sbi	0x08, 3	; 8
    15ea:	88 e8       	ldi	r24, 0x88	; 136
    15ec:	93 e1       	ldi	r25, 0x13	; 19
    15ee:	20 e7       	ldi	r18, 0x70	; 112
    15f0:	31 e0       	ldi	r19, 0x01	; 1
    15f2:	f9 01       	movw	r30, r18
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <main+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	d9 f7       	brne	.-10     	; 0x15f2 <main+0x20>
}
void buzzer_off(void)
{
	PORTC = PORTC & ~(0x08);
    15fc:	43 98       	cbi	0x08, 3	; 8
    15fe:	00 e7       	ldi	r16, 0x70	; 112
    1600:	11 e0       	ldi	r17, 0x01	; 1
		lcd_reset();
		lcd_cursor(1,1);
		lcd_string("Distance:    ");
		lcd_print(2,1,distance,3);
		//_delay_ms(1000);
		forward_follow_mm((((unsigned int)distance)*10)+(botLength*(1-flagOffset)));//((unsigned int)distance )*10);
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	e2 2e       	mov	r14, r18
    1606:	f1 2c       	mov	r15, r1
    1608:	9a e0       	ldi	r25, 0x0A	; 10
    160a:	d9 2e       	mov	r13, r25
	}*/
	while(1)
	{
		flagOffset = 0;
		//print_sensor(1,5,2);
		oldLinePoint = linePoint;		// save last linePoint
    160c:	80 91 73 03 	lds	r24, 0x0373
    1610:	80 93 71 03 	sts	0x0371, r24
}

unsigned char readZigbee()
{
	while(!rcvFlag);
    1614:	80 91 6a 03 	lds	r24, 0x036A
    1618:	90 91 6b 03 	lds	r25, 0x036B
    161c:	89 2b       	or	r24, r25
    161e:	d1 f3       	breq	.-12     	; 0x1614 <main+0x42>
	rcvFlag=0;
    1620:	10 92 6b 03 	sts	0x036B, r1
    1624:	10 92 6a 03 	sts	0x036A, r1
	return data;
    1628:	80 91 83 03 	lds	r24, 0x0383
		linePoint = readZigbee();		// read new linePoint
    162c:	80 93 73 03 	sts	0x0373, r24
		lcd_reset();
    1630:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_reset>
		lcd_cursor(1,1);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_string("LinePoint:");
    163c:	81 e1       	ldi	r24, 0x11	; 17
    163e:	92 e0       	ldi	r25, 0x02	; 2
    1640:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
		lcd_cursor(2,1);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_wr_char(linePoint + '0');
    164c:	80 91 73 03 	lds	r24, 0x0373
    1650:	80 5d       	subi	r24, 0xD0	; 208
    1652:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
    1656:	80 e1       	ldi	r24, 0x10	; 16
    1658:	97 e2       	ldi	r25, 0x27	; 39
    165a:	f8 01       	movw	r30, r16
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	d9 f7       	brne	.-10     	; 0x165a <main+0x88>
		_delay_ms(1000);

		if(linePoint!=oldLinePoint)		//	return from this line and sit facing new line
    1664:	60 91 73 03 	lds	r22, 0x0373
    1668:	80 91 71 03 	lds	r24, 0x0371
    166c:	68 17       	cp	r22, r24
    166e:	51 f0       	breq	.+20     	; 0x1684 <main+0xb2>
		{
			goToLine(oldLinePoint,linePoint,checkPoint);
    1670:	40 91 72 03 	lds	r20, 0x0372
    1674:	0e 94 32 08 	call	0x1064	; 0x1064 <goToLine>
			checkPoint=0;
    1678:	10 92 72 03 	sts	0x0372, r1
			if(linePoint==0)
    167c:	80 91 73 03 	lds	r24, 0x0373
    1680:	88 23       	and	r24, r24
    1682:	41 f0       	breq	.+16     	; 0x1694 <main+0xc2>
			{
				sendSignal(linePoint);
				continue;
			}
		}
		if(linePoint==0 && oldLinePoint==0)
    1684:	90 91 73 03 	lds	r25, 0x0373
    1688:	99 23       	and	r25, r25
    168a:	39 f4       	brne	.+14     	; 0x169a <main+0xc8>
    168c:	80 91 71 03 	lds	r24, 0x0371
    1690:	88 23       	and	r24, r24
    1692:	19 f4       	brne	.+6      	; 0x169a <main+0xc8>
	}*/
}

void sendSignal(char msg)
{
	UDR0 = msg;
    1694:	10 92 c6 00 	sts	0x00C6, r1
    1698:	b9 cf       	rjmp	.-142    	; 0x160c <main+0x3a>
			sendSignal(linePoint);
			continue;
		}

		sendSignal(linePoint);			// send back this new checkpoint to zigbee server
		oldCheckPoint = checkPoint;		// save last checkpoint
    169a:	90 93 c6 00 	sts	0x00C6, r25
    169e:	80 91 72 03 	lds	r24, 0x0372
    16a2:	80 93 70 03 	sts	0x0370, r24
 sei();   //Enables the global interrupts
}

unsigned char readZigbee()
{
	while(!rcvFlag);
    16a6:	80 91 6a 03 	lds	r24, 0x036A
    16aa:	90 91 6b 03 	lds	r25, 0x036B
    16ae:	89 2b       	or	r24, r25
    16b0:	d1 f3       	breq	.-12     	; 0x16a6 <main+0xd4>
	rcvFlag=0;
    16b2:	10 92 6b 03 	sts	0x036B, r1
    16b6:	10 92 6a 03 	sts	0x036A, r1
	return data;
    16ba:	80 91 83 03 	lds	r24, 0x0383
		checkPoint = readZigbee();		// read new checkpoint
    16be:	80 93 72 03 	sts	0x0372, r24
		lcd_reset();
    16c2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_reset>
		lcd_cursor(1,1);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_string("Checkpoint:");
    16ce:	8c e1       	ldi	r24, 0x1C	; 28
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
		lcd_cursor(2,1);
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_wr_char(checkPoint + '0');
    16de:	80 91 72 03 	lds	r24, 0x0372
    16e2:	80 5d       	subi	r24, 0xD0	; 208
    16e4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
    16e8:	80 e1       	ldi	r24, 0x10	; 16
    16ea:	97 e2       	ldi	r25, 0x27	; 39
    16ec:	f8 01       	movw	r30, r16
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <main+0x11c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <main+0x11a>
		_delay_ms(1000);

		if(oldCheckPoint == checkPoint)	// no need to go to next checkpoint
    16f6:	80 91 70 03 	lds	r24, 0x0370
    16fa:	60 91 72 03 	lds	r22, 0x0372
    16fe:	86 17       	cp	r24, r22
    1700:	19 f4       	brne	.+6      	; 0x1708 <main+0x136>
    1702:	c1 e0       	ldi	r28, 0x01	; 1
    1704:	d0 e0       	ldi	r29, 0x00	; 0
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <main+0x142>
			_delay_ms(2500);
*/			flagOffset = 1;
		}
		else
		{
			goToCheckPoint(oldCheckPoint,checkPoint);
    1708:	0e 94 ba 06 	call	0xd74	; 0xd74 <goToCheckPoint>
			oldDistance = 0;
    170c:	10 92 75 03 	sts	0x0375, r1
    1710:	c0 e0       	ldi	r28, 0x00	; 0
    1712:	d0 e0       	ldi	r29, 0x00	; 0
		}
		sendSignal(checkPoint);			// send back this new checkpoint to zigbee server
    1714:	80 91 72 03 	lds	r24, 0x0372
	}*/
}

void sendSignal(char msg)
{
	UDR0 = msg;
    1718:	80 93 c6 00 	sts	0x00C6, r24
		oldDistance += distance;
    171c:	20 91 74 03 	lds	r18, 0x0374
    1720:	80 91 75 03 	lds	r24, 0x0375
    1724:	28 0f       	add	r18, r24
    1726:	20 93 75 03 	sts	0x0375, r18
 sei();   //Enables the global interrupts
}

unsigned char readZigbee()
{
	while(!rcvFlag);
    172a:	80 91 6a 03 	lds	r24, 0x036A
    172e:	90 91 6b 03 	lds	r25, 0x036B
    1732:	89 2b       	or	r24, r25
    1734:	d1 f3       	breq	.-12     	; 0x172a <main+0x158>
	rcvFlag=0;
    1736:	10 92 6b 03 	sts	0x036B, r1
    173a:	10 92 6a 03 	sts	0x036A, r1
	return data;
    173e:	80 91 83 03 	lds	r24, 0x0383
		distance = readZigbee();
    1742:	80 93 74 03 	sts	0x0374, r24
		
		if (flagOffset)
    1746:	20 97       	sbiw	r28, 0x00	; 0
    1748:	19 f0       	breq	.+6      	; 0x1750 <main+0x17e>
			distance = distance - oldDistance;		// distance to be travelled is relative to current position
    174a:	82 1b       	sub	r24, r18
    174c:	80 93 74 03 	sts	0x0374, r24
		lcd_reset();
    1750:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_reset>
		lcd_cursor(1,1);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_string("Distance:    ");
    175c:	88 e2       	ldi	r24, 0x28	; 40
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
		lcd_print(2,1,distance,3);
    1764:	40 91 74 03 	lds	r20, 0x0374
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	23 e0       	ldi	r18, 0x03	; 3
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
		//_delay_ms(1000);
		forward_follow_mm((((unsigned int)distance)*10)+(botLength*(1-flagOffset)));//((unsigned int)distance )*10);
    1776:	97 01       	movw	r18, r14
    1778:	2c 1b       	sub	r18, r28
    177a:	3d 0b       	sbc	r19, r29
    177c:	80 91 55 02 	lds	r24, 0x0255
    1780:	90 91 56 02 	lds	r25, 0x0256
    1784:	ac 01       	movw	r20, r24
    1786:	24 9f       	mul	r18, r20
    1788:	c0 01       	movw	r24, r0
    178a:	25 9f       	mul	r18, r21
    178c:	90 0d       	add	r25, r0
    178e:	34 9f       	mul	r19, r20
    1790:	90 0d       	add	r25, r0
    1792:	11 24       	eor	r1, r1
    1794:	20 91 74 03 	lds	r18, 0x0374
    1798:	2d 9d       	mul	r18, r13
    179a:	90 01       	movw	r18, r0
    179c:	11 24       	eor	r1, r1
    179e:	82 0f       	add	r24, r18
    17a0:	93 1f       	adc	r25, r19
    17a2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <forward_follow_mm>
		sendSignal(distance);
    17a6:	80 91 74 03 	lds	r24, 0x0374
	}*/
}

void sendSignal(char msg)
{
	UDR0 = msg;
    17aa:	80 93 c6 00 	sts	0x00C6, r24
 sei();   //Enables the global interrupts
}

unsigned char readZigbee()
{
	while(!rcvFlag);
    17ae:	80 91 6a 03 	lds	r24, 0x036A
    17b2:	90 91 6b 03 	lds	r25, 0x036B
    17b6:	89 2b       	or	r24, r25
    17b8:	d1 f3       	breq	.-12     	; 0x17ae <main+0x1dc>
	rcvFlag=0;
    17ba:	10 92 6b 03 	sts	0x036B, r1
    17be:	10 92 6a 03 	sts	0x036A, r1
	return data;
    17c2:	80 91 83 03 	lds	r24, 0x0383
		direction = readZigbee();					// l or r
    17c6:	80 93 76 03 	sts	0x0376, r24
	}*/
}

void sendSignal(char msg)
{
	UDR0 = msg;
    17ca:	80 93 c6 00 	sts	0x00C6, r24
		sendSignal(direction);
		lcd_reset();
    17ce:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_reset>
		lcd_cursor(1,1);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_string("Direction:");
    17da:	86 e3       	ldi	r24, 0x36	; 54
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
		lcd_cursor(2,1);
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_wr_char(direction);
    17ea:	80 91 76 03 	lds	r24, 0x0376
    17ee:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_wr_char>
		moistureValue=senseTrough(direction);
    17f2:	80 91 76 03 	lds	r24, 0x0376
    17f6:	0e 94 b6 09 	call	0x136c	; 0x136c <senseTrough>
    17fa:	80 93 77 03 	sts	0x0377, r24
		lcd_reset();
    17fe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <lcd_reset>
		lcd_cursor(1,1);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_string("Moisture Value:");
    180a:	81 e4       	ldi	r24, 0x41	; 65
    180c:	92 e0       	ldi	r25, 0x02	; 2
    180e:	0e 94 23 01 	call	0x246	; 0x246 <lcd_string>
		lcd_cursor(2,1);
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	0e 94 30 01 	call	0x260	; 0x260 <lcd_cursor>
		lcd_print(2,1,moistureValue,3);
    181a:	40 91 77 03 	lds	r20, 0x0377
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	23 e0       	ldi	r18, 0x03	; 3
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_print>
		sendSignal(moistureValue);
    182c:	80 91 77 03 	lds	r24, 0x0377
    1830:	80 93 c6 00 	sts	0x00C6, r24
    1834:	eb ce       	rjmp	.-554    	; 0x160c <main+0x3a>

00001836 <__fixunssfsi>:
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	7b 01       	movw	r14, r22
    1840:	8c 01       	movw	r16, r24
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	5f e4       	ldi	r21, 0x4F	; 79
    184a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <__gesf2>
    184e:	88 23       	and	r24, r24
    1850:	8c f0       	brlt	.+34     	; 0x1874 <__fixunssfsi+0x3e>
    1852:	c8 01       	movw	r24, r16
    1854:	b7 01       	movw	r22, r14
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	5f e4       	ldi	r21, 0x4F	; 79
    185e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__subsf3>
    1862:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fixsfsi>
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	20 50       	subi	r18, 0x00	; 0
    186c:	30 40       	sbci	r19, 0x00	; 0
    186e:	40 40       	sbci	r20, 0x00	; 0
    1870:	50 48       	sbci	r21, 0x80	; 128
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <__fixunssfsi+0x4a>
    1874:	c8 01       	movw	r24, r16
    1876:	b7 01       	movw	r22, r14
    1878:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fixsfsi>
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	b9 01       	movw	r22, r18
    1882:	ca 01       	movw	r24, r20
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	08 95       	ret

0000188e <_fpadd_parts>:
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ed e4       	ldi	r30, 0x4D	; 77
    1894:	fc e0       	ldi	r31, 0x0C	; 12
    1896:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__>
    189a:	dc 01       	movw	r26, r24
    189c:	2b 01       	movw	r4, r22
    189e:	fa 01       	movw	r30, r20
    18a0:	9c 91       	ld	r25, X
    18a2:	92 30       	cpi	r25, 0x02	; 2
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <_fpadd_parts+0x1a>
    18a6:	39 c1       	rjmp	.+626    	; 0x1b1a <_fpadd_parts+0x28c>
    18a8:	eb 01       	movw	r28, r22
    18aa:	88 81       	ld	r24, Y
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	08 f4       	brcc	.+2      	; 0x18b2 <_fpadd_parts+0x24>
    18b0:	33 c1       	rjmp	.+614    	; 0x1b18 <_fpadd_parts+0x28a>
    18b2:	94 30       	cpi	r25, 0x04	; 4
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <_fpadd_parts+0x42>
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	09 f0       	breq	.+2      	; 0x18bc <_fpadd_parts+0x2e>
    18ba:	2f c1       	rjmp	.+606    	; 0x1b1a <_fpadd_parts+0x28c>
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	9c 91       	ld	r25, X
    18c0:	11 97       	sbiw	r26, 0x01	; 1
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	98 17       	cp	r25, r24
    18c6:	09 f4       	brne	.+2      	; 0x18ca <_fpadd_parts+0x3c>
    18c8:	28 c1       	rjmp	.+592    	; 0x1b1a <_fpadd_parts+0x28c>
    18ca:	a7 e5       	ldi	r26, 0x57	; 87
    18cc:	b2 e0       	ldi	r27, 0x02	; 2
    18ce:	25 c1       	rjmp	.+586    	; 0x1b1a <_fpadd_parts+0x28c>
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <_fpadd_parts+0x48>
    18d4:	21 c1       	rjmp	.+578    	; 0x1b18 <_fpadd_parts+0x28a>
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	a9 f4       	brne	.+42     	; 0x1904 <_fpadd_parts+0x76>
    18da:	92 30       	cpi	r25, 0x02	; 2
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <_fpadd_parts+0x52>
    18de:	1d c1       	rjmp	.+570    	; 0x1b1a <_fpadd_parts+0x28c>
    18e0:	9a 01       	movw	r18, r20
    18e2:	ad 01       	movw	r20, r26
    18e4:	88 e0       	ldi	r24, 0x08	; 8
    18e6:	ea 01       	movw	r28, r20
    18e8:	09 90       	ld	r0, Y+
    18ea:	ae 01       	movw	r20, r28
    18ec:	e9 01       	movw	r28, r18
    18ee:	09 92       	st	Y+, r0
    18f0:	9e 01       	movw	r18, r28
    18f2:	81 50       	subi	r24, 0x01	; 1
    18f4:	c1 f7       	brne	.-16     	; 0x18e6 <_fpadd_parts+0x58>
    18f6:	e2 01       	movw	r28, r4
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	9c 91       	ld	r25, X
    18fe:	89 23       	and	r24, r25
    1900:	81 83       	std	Z+1, r24	; 0x01
    1902:	08 c1       	rjmp	.+528    	; 0x1b14 <_fpadd_parts+0x286>
    1904:	92 30       	cpi	r25, 0x02	; 2
    1906:	09 f4       	brne	.+2      	; 0x190a <_fpadd_parts+0x7c>
    1908:	07 c1       	rjmp	.+526    	; 0x1b18 <_fpadd_parts+0x28a>
    190a:	12 96       	adiw	r26, 0x02	; 2
    190c:	2d 90       	ld	r2, X+
    190e:	3c 90       	ld	r3, X
    1910:	13 97       	sbiw	r26, 0x03	; 3
    1912:	eb 01       	movw	r28, r22
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	14 96       	adiw	r26, 0x04	; 4
    191a:	ad 90       	ld	r10, X+
    191c:	bd 90       	ld	r11, X+
    191e:	cd 90       	ld	r12, X+
    1920:	dc 90       	ld	r13, X
    1922:	17 97       	sbiw	r26, 0x07	; 7
    1924:	ec 80       	ldd	r14, Y+4	; 0x04
    1926:	fd 80       	ldd	r15, Y+5	; 0x05
    1928:	0e 81       	ldd	r16, Y+6	; 0x06
    192a:	1f 81       	ldd	r17, Y+7	; 0x07
    192c:	91 01       	movw	r18, r2
    192e:	28 1b       	sub	r18, r24
    1930:	39 0b       	sbc	r19, r25
    1932:	b9 01       	movw	r22, r18
    1934:	37 ff       	sbrs	r19, 7
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <_fpadd_parts+0xb2>
    1938:	66 27       	eor	r22, r22
    193a:	77 27       	eor	r23, r23
    193c:	62 1b       	sub	r22, r18
    193e:	73 0b       	sbc	r23, r19
    1940:	60 32       	cpi	r22, 0x20	; 32
    1942:	71 05       	cpc	r23, r1
    1944:	0c f0       	brlt	.+2      	; 0x1948 <_fpadd_parts+0xba>
    1946:	61 c0       	rjmp	.+194    	; 0x1a0a <_fpadd_parts+0x17c>
    1948:	12 16       	cp	r1, r18
    194a:	13 06       	cpc	r1, r19
    194c:	6c f5       	brge	.+90     	; 0x19a8 <_fpadd_parts+0x11a>
    194e:	37 01       	movw	r6, r14
    1950:	48 01       	movw	r8, r16
    1952:	06 2e       	mov	r0, r22
    1954:	04 c0       	rjmp	.+8      	; 0x195e <_fpadd_parts+0xd0>
    1956:	96 94       	lsr	r9
    1958:	87 94       	ror	r8
    195a:	77 94       	ror	r7
    195c:	67 94       	ror	r6
    195e:	0a 94       	dec	r0
    1960:	d2 f7       	brpl	.-12     	; 0x1956 <_fpadd_parts+0xc8>
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <_fpadd_parts+0xe6>
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	44 1f       	adc	r20, r20
    1972:	55 1f       	adc	r21, r21
    1974:	6a 95       	dec	r22
    1976:	d2 f7       	brpl	.-12     	; 0x196c <_fpadd_parts+0xde>
    1978:	21 50       	subi	r18, 0x01	; 1
    197a:	30 40       	sbci	r19, 0x00	; 0
    197c:	40 40       	sbci	r20, 0x00	; 0
    197e:	50 40       	sbci	r21, 0x00	; 0
    1980:	2e 21       	and	r18, r14
    1982:	3f 21       	and	r19, r15
    1984:	40 23       	and	r20, r16
    1986:	51 23       	and	r21, r17
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	41 05       	cpc	r20, r1
    198e:	51 05       	cpc	r21, r1
    1990:	21 f0       	breq	.+8      	; 0x199a <_fpadd_parts+0x10c>
    1992:	21 e0       	ldi	r18, 0x01	; 1
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	79 01       	movw	r14, r18
    199c:	8a 01       	movw	r16, r20
    199e:	e6 28       	or	r14, r6
    19a0:	f7 28       	or	r15, r7
    19a2:	08 29       	or	r16, r8
    19a4:	19 29       	or	r17, r9
    19a6:	3c c0       	rjmp	.+120    	; 0x1a20 <_fpadd_parts+0x192>
    19a8:	23 2b       	or	r18, r19
    19aa:	d1 f1       	breq	.+116    	; 0x1a20 <_fpadd_parts+0x192>
    19ac:	26 0e       	add	r2, r22
    19ae:	37 1e       	adc	r3, r23
    19b0:	35 01       	movw	r6, r10
    19b2:	46 01       	movw	r8, r12
    19b4:	06 2e       	mov	r0, r22
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <_fpadd_parts+0x132>
    19b8:	96 94       	lsr	r9
    19ba:	87 94       	ror	r8
    19bc:	77 94       	ror	r7
    19be:	67 94       	ror	r6
    19c0:	0a 94       	dec	r0
    19c2:	d2 f7       	brpl	.-12     	; 0x19b8 <_fpadd_parts+0x12a>
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <_fpadd_parts+0x148>
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	44 1f       	adc	r20, r20
    19d4:	55 1f       	adc	r21, r21
    19d6:	6a 95       	dec	r22
    19d8:	d2 f7       	brpl	.-12     	; 0x19ce <_fpadd_parts+0x140>
    19da:	21 50       	subi	r18, 0x01	; 1
    19dc:	30 40       	sbci	r19, 0x00	; 0
    19de:	40 40       	sbci	r20, 0x00	; 0
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	2a 21       	and	r18, r10
    19e4:	3b 21       	and	r19, r11
    19e6:	4c 21       	and	r20, r12
    19e8:	5d 21       	and	r21, r13
    19ea:	21 15       	cp	r18, r1
    19ec:	31 05       	cpc	r19, r1
    19ee:	41 05       	cpc	r20, r1
    19f0:	51 05       	cpc	r21, r1
    19f2:	21 f0       	breq	.+8      	; 0x19fc <_fpadd_parts+0x16e>
    19f4:	21 e0       	ldi	r18, 0x01	; 1
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	59 01       	movw	r10, r18
    19fe:	6a 01       	movw	r12, r20
    1a00:	a6 28       	or	r10, r6
    1a02:	b7 28       	or	r11, r7
    1a04:	c8 28       	or	r12, r8
    1a06:	d9 28       	or	r13, r9
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <_fpadd_parts+0x192>
    1a0a:	82 15       	cp	r24, r2
    1a0c:	93 05       	cpc	r25, r3
    1a0e:	2c f0       	brlt	.+10     	; 0x1a1a <_fpadd_parts+0x18c>
    1a10:	1c 01       	movw	r2, r24
    1a12:	aa 24       	eor	r10, r10
    1a14:	bb 24       	eor	r11, r11
    1a16:	65 01       	movw	r12, r10
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <_fpadd_parts+0x192>
    1a1a:	ee 24       	eor	r14, r14
    1a1c:	ff 24       	eor	r15, r15
    1a1e:	87 01       	movw	r16, r14
    1a20:	11 96       	adiw	r26, 0x01	; 1
    1a22:	9c 91       	ld	r25, X
    1a24:	d2 01       	movw	r26, r4
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	8c 91       	ld	r24, X
    1a2a:	98 17       	cp	r25, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <_fpadd_parts+0x1a2>
    1a2e:	45 c0       	rjmp	.+138    	; 0x1aba <_fpadd_parts+0x22c>
    1a30:	99 23       	and	r25, r25
    1a32:	39 f0       	breq	.+14     	; 0x1a42 <_fpadd_parts+0x1b4>
    1a34:	a8 01       	movw	r20, r16
    1a36:	97 01       	movw	r18, r14
    1a38:	2a 19       	sub	r18, r10
    1a3a:	3b 09       	sbc	r19, r11
    1a3c:	4c 09       	sbc	r20, r12
    1a3e:	5d 09       	sbc	r21, r13
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <_fpadd_parts+0x1c0>
    1a42:	a6 01       	movw	r20, r12
    1a44:	95 01       	movw	r18, r10
    1a46:	2e 19       	sub	r18, r14
    1a48:	3f 09       	sbc	r19, r15
    1a4a:	40 0b       	sbc	r20, r16
    1a4c:	51 0b       	sbc	r21, r17
    1a4e:	57 fd       	sbrc	r21, 7
    1a50:	08 c0       	rjmp	.+16     	; 0x1a62 <_fpadd_parts+0x1d4>
    1a52:	11 82       	std	Z+1, r1	; 0x01
    1a54:	33 82       	std	Z+3, r3	; 0x03
    1a56:	22 82       	std	Z+2, r2	; 0x02
    1a58:	24 83       	std	Z+4, r18	; 0x04
    1a5a:	35 83       	std	Z+5, r19	; 0x05
    1a5c:	46 83       	std	Z+6, r20	; 0x06
    1a5e:	57 83       	std	Z+7, r21	; 0x07
    1a60:	1d c0       	rjmp	.+58     	; 0x1a9c <_fpadd_parts+0x20e>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	81 83       	std	Z+1, r24	; 0x01
    1a66:	33 82       	std	Z+3, r3	; 0x03
    1a68:	22 82       	std	Z+2, r2	; 0x02
    1a6a:	88 27       	eor	r24, r24
    1a6c:	99 27       	eor	r25, r25
    1a6e:	dc 01       	movw	r26, r24
    1a70:	82 1b       	sub	r24, r18
    1a72:	93 0b       	sbc	r25, r19
    1a74:	a4 0b       	sbc	r26, r20
    1a76:	b5 0b       	sbc	r27, r21
    1a78:	84 83       	std	Z+4, r24	; 0x04
    1a7a:	95 83       	std	Z+5, r25	; 0x05
    1a7c:	a6 83       	std	Z+6, r26	; 0x06
    1a7e:	b7 83       	std	Z+7, r27	; 0x07
    1a80:	0d c0       	rjmp	.+26     	; 0x1a9c <_fpadd_parts+0x20e>
    1a82:	22 0f       	add	r18, r18
    1a84:	33 1f       	adc	r19, r19
    1a86:	44 1f       	adc	r20, r20
    1a88:	55 1f       	adc	r21, r21
    1a8a:	24 83       	std	Z+4, r18	; 0x04
    1a8c:	35 83       	std	Z+5, r19	; 0x05
    1a8e:	46 83       	std	Z+6, r20	; 0x06
    1a90:	57 83       	std	Z+7, r21	; 0x07
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	93 83       	std	Z+3, r25	; 0x03
    1a9a:	82 83       	std	Z+2, r24	; 0x02
    1a9c:	24 81       	ldd	r18, Z+4	; 0x04
    1a9e:	35 81       	ldd	r19, Z+5	; 0x05
    1aa0:	46 81       	ldd	r20, Z+6	; 0x06
    1aa2:	57 81       	ldd	r21, Z+7	; 0x07
    1aa4:	da 01       	movw	r26, r20
    1aa6:	c9 01       	movw	r24, r18
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	a1 09       	sbc	r26, r1
    1aac:	b1 09       	sbc	r27, r1
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	af 4f       	sbci	r26, 0xFF	; 255
    1ab4:	bf 43       	sbci	r27, 0x3F	; 63
    1ab6:	28 f3       	brcs	.-54     	; 0x1a82 <_fpadd_parts+0x1f4>
    1ab8:	0b c0       	rjmp	.+22     	; 0x1ad0 <_fpadd_parts+0x242>
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	33 82       	std	Z+3, r3	; 0x03
    1abe:	22 82       	std	Z+2, r2	; 0x02
    1ac0:	ea 0c       	add	r14, r10
    1ac2:	fb 1c       	adc	r15, r11
    1ac4:	0c 1d       	adc	r16, r12
    1ac6:	1d 1d       	adc	r17, r13
    1ac8:	e4 82       	std	Z+4, r14	; 0x04
    1aca:	f5 82       	std	Z+5, r15	; 0x05
    1acc:	06 83       	std	Z+6, r16	; 0x06
    1ace:	17 83       	std	Z+7, r17	; 0x07
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	80 83       	st	Z, r24
    1ad4:	24 81       	ldd	r18, Z+4	; 0x04
    1ad6:	35 81       	ldd	r19, Z+5	; 0x05
    1ad8:	46 81       	ldd	r20, Z+6	; 0x06
    1ada:	57 81       	ldd	r21, Z+7	; 0x07
    1adc:	57 ff       	sbrs	r21, 7
    1ade:	1a c0       	rjmp	.+52     	; 0x1b14 <_fpadd_parts+0x286>
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	aa 27       	eor	r26, r26
    1ae4:	97 fd       	sbrc	r25, 7
    1ae6:	a0 95       	com	r26
    1ae8:	ba 2f       	mov	r27, r26
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	90 70       	andi	r25, 0x00	; 0
    1aee:	a0 70       	andi	r26, 0x00	; 0
    1af0:	b0 70       	andi	r27, 0x00	; 0
    1af2:	56 95       	lsr	r21
    1af4:	47 95       	ror	r20
    1af6:	37 95       	ror	r19
    1af8:	27 95       	ror	r18
    1afa:	82 2b       	or	r24, r18
    1afc:	93 2b       	or	r25, r19
    1afe:	a4 2b       	or	r26, r20
    1b00:	b5 2b       	or	r27, r21
    1b02:	84 83       	std	Z+4, r24	; 0x04
    1b04:	95 83       	std	Z+5, r25	; 0x05
    1b06:	a6 83       	std	Z+6, r26	; 0x06
    1b08:	b7 83       	std	Z+7, r27	; 0x07
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	93 83       	std	Z+3, r25	; 0x03
    1b12:	82 83       	std	Z+2, r24	; 0x02
    1b14:	df 01       	movw	r26, r30
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <_fpadd_parts+0x28c>
    1b18:	d2 01       	movw	r26, r4
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	e2 e1       	ldi	r30, 0x12	; 18
    1b22:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__>

00001b26 <__subsf3>:
    1b26:	a0 e2       	ldi	r26, 0x20	; 32
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__+0x18>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	2d 83       	std	Y+5, r18	; 0x05
    1b3c:	3e 83       	std	Y+6, r19	; 0x06
    1b3e:	4f 83       	std	Y+7, r20	; 0x07
    1b40:	58 87       	std	Y+8, r21	; 0x08
    1b42:	e9 e0       	ldi	r30, 0x09	; 9
    1b44:	ee 2e       	mov	r14, r30
    1b46:	f1 2c       	mov	r15, r1
    1b48:	ec 0e       	add	r14, r28
    1b4a:	fd 1e       	adc	r15, r29
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	b7 01       	movw	r22, r14
    1b52:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1b56:	8e 01       	movw	r16, r28
    1b58:	0f 5e       	subi	r16, 0xEF	; 239
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	05 96       	adiw	r24, 0x05	; 5
    1b60:	b8 01       	movw	r22, r16
    1b62:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1b66:	8a 89       	ldd	r24, Y+18	; 0x12
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	89 27       	eor	r24, r25
    1b6c:	8a 8b       	std	Y+18, r24	; 0x12
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b8 01       	movw	r22, r16
    1b72:	ae 01       	movw	r20, r28
    1b74:	47 5e       	subi	r20, 0xE7	; 231
    1b76:	5f 4f       	sbci	r21, 0xFF	; 255
    1b78:	0e 94 47 0c 	call	0x188e	; 0x188e <_fpadd_parts>
    1b7c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__pack_f>
    1b80:	a0 96       	adiw	r28, 0x20	; 32
    1b82:	e6 e0       	ldi	r30, 0x06	; 6
    1b84:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__+0x18>

00001b88 <__addsf3>:
    1b88:	a0 e2       	ldi	r26, 0x20	; 32
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ea ec       	ldi	r30, 0xCA	; 202
    1b8e:	fd e0       	ldi	r31, 0x0D	; 13
    1b90:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__+0x18>
    1b94:	69 83       	std	Y+1, r22	; 0x01
    1b96:	7a 83       	std	Y+2, r23	; 0x02
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	2d 83       	std	Y+5, r18	; 0x05
    1b9e:	3e 83       	std	Y+6, r19	; 0x06
    1ba0:	4f 83       	std	Y+7, r20	; 0x07
    1ba2:	58 87       	std	Y+8, r21	; 0x08
    1ba4:	f9 e0       	ldi	r31, 0x09	; 9
    1ba6:	ef 2e       	mov	r14, r31
    1ba8:	f1 2c       	mov	r15, r1
    1baa:	ec 0e       	add	r14, r28
    1bac:	fd 1e       	adc	r15, r29
    1bae:	ce 01       	movw	r24, r28
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1bb8:	8e 01       	movw	r16, r28
    1bba:	0f 5e       	subi	r16, 0xEF	; 239
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	05 96       	adiw	r24, 0x05	; 5
    1bc2:	b8 01       	movw	r22, r16
    1bc4:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1bc8:	c7 01       	movw	r24, r14
    1bca:	b8 01       	movw	r22, r16
    1bcc:	ae 01       	movw	r20, r28
    1bce:	47 5e       	subi	r20, 0xE7	; 231
    1bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd2:	0e 94 47 0c 	call	0x188e	; 0x188e <_fpadd_parts>
    1bd6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__pack_f>
    1bda:	a0 96       	adiw	r28, 0x20	; 32
    1bdc:	e6 e0       	ldi	r30, 0x06	; 6
    1bde:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__+0x18>

00001be2 <__divsf3>:
    1be2:	a8 e1       	ldi	r26, 0x18	; 24
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 ef       	ldi	r30, 0xF7	; 247
    1be8:	fd e0       	ldi	r31, 0x0D	; 13
    1bea:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x10>
    1bee:	69 83       	std	Y+1, r22	; 0x01
    1bf0:	7a 83       	std	Y+2, r23	; 0x02
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	2d 83       	std	Y+5, r18	; 0x05
    1bf8:	3e 83       	std	Y+6, r19	; 0x06
    1bfa:	4f 83       	std	Y+7, r20	; 0x07
    1bfc:	58 87       	std	Y+8, r21	; 0x08
    1bfe:	b9 e0       	ldi	r27, 0x09	; 9
    1c00:	eb 2e       	mov	r14, r27
    1c02:	f1 2c       	mov	r15, r1
    1c04:	ec 0e       	add	r14, r28
    1c06:	fd 1e       	adc	r15, r29
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1c12:	8e 01       	movw	r16, r28
    1c14:	0f 5e       	subi	r16, 0xEF	; 239
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	ce 01       	movw	r24, r28
    1c1a:	05 96       	adiw	r24, 0x05	; 5
    1c1c:	b8 01       	movw	r22, r16
    1c1e:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1c22:	29 85       	ldd	r18, Y+9	; 0x09
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <__divsf3+0x48>
    1c28:	7e c0       	rjmp	.+252    	; 0x1d26 <__divsf3+0x144>
    1c2a:	39 89       	ldd	r19, Y+17	; 0x11
    1c2c:	32 30       	cpi	r19, 0x02	; 2
    1c2e:	10 f4       	brcc	.+4      	; 0x1c34 <__divsf3+0x52>
    1c30:	b8 01       	movw	r22, r16
    1c32:	7c c0       	rjmp	.+248    	; 0x1d2c <__divsf3+0x14a>
    1c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c36:	9a 89       	ldd	r25, Y+18	; 0x12
    1c38:	89 27       	eor	r24, r25
    1c3a:	8a 87       	std	Y+10, r24	; 0x0a
    1c3c:	24 30       	cpi	r18, 0x04	; 4
    1c3e:	11 f0       	breq	.+4      	; 0x1c44 <__divsf3+0x62>
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 f4       	brne	.+12     	; 0x1c50 <__divsf3+0x6e>
    1c44:	23 17       	cp	r18, r19
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <__divsf3+0x68>
    1c48:	6e c0       	rjmp	.+220    	; 0x1d26 <__divsf3+0x144>
    1c4a:	67 e5       	ldi	r22, 0x57	; 87
    1c4c:	72 e0       	ldi	r23, 0x02	; 2
    1c4e:	6e c0       	rjmp	.+220    	; 0x1d2c <__divsf3+0x14a>
    1c50:	34 30       	cpi	r19, 0x04	; 4
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <__divsf3+0x80>
    1c54:	1d 86       	std	Y+13, r1	; 0x0d
    1c56:	1e 86       	std	Y+14, r1	; 0x0e
    1c58:	1f 86       	std	Y+15, r1	; 0x0f
    1c5a:	18 8a       	std	Y+16, r1	; 0x10
    1c5c:	1c 86       	std	Y+12, r1	; 0x0c
    1c5e:	1b 86       	std	Y+11, r1	; 0x0b
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <__divsf3+0x88>
    1c62:	32 30       	cpi	r19, 0x02	; 2
    1c64:	21 f4       	brne	.+8      	; 0x1c6e <__divsf3+0x8c>
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	89 87       	std	Y+9, r24	; 0x09
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	5f c0       	rjmp	.+190    	; 0x1d2c <__divsf3+0x14a>
    1c6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c70:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	28 1b       	sub	r18, r24
    1c78:	39 0b       	sbc	r19, r25
    1c7a:	3c 87       	std	Y+12, r19	; 0x0c
    1c7c:	2b 87       	std	Y+11, r18	; 0x0b
    1c7e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c80:	fe 84       	ldd	r15, Y+14	; 0x0e
    1c82:	0f 85       	ldd	r16, Y+15	; 0x0f
    1c84:	18 89       	ldd	r17, Y+16	; 0x10
    1c86:	ad 88       	ldd	r10, Y+21	; 0x15
    1c88:	be 88       	ldd	r11, Y+22	; 0x16
    1c8a:	cf 88       	ldd	r12, Y+23	; 0x17
    1c8c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1c8e:	ea 14       	cp	r14, r10
    1c90:	fb 04       	cpc	r15, r11
    1c92:	0c 05       	cpc	r16, r12
    1c94:	1d 05       	cpc	r17, r13
    1c96:	40 f4       	brcc	.+16     	; 0x1ca8 <__divsf3+0xc6>
    1c98:	ee 0c       	add	r14, r14
    1c9a:	ff 1c       	adc	r15, r15
    1c9c:	00 1f       	adc	r16, r16
    1c9e:	11 1f       	adc	r17, r17
    1ca0:	21 50       	subi	r18, 0x01	; 1
    1ca2:	30 40       	sbci	r19, 0x00	; 0
    1ca4:	3c 87       	std	Y+12, r19	; 0x0c
    1ca6:	2b 87       	std	Y+11, r18	; 0x0b
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e4       	ldi	r27, 0x40	; 64
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	ea 14       	cp	r14, r10
    1cbe:	fb 04       	cpc	r15, r11
    1cc0:	0c 05       	cpc	r16, r12
    1cc2:	1d 05       	cpc	r17, r13
    1cc4:	40 f0       	brcs	.+16     	; 0x1cd6 <__divsf3+0xf4>
    1cc6:	28 2b       	or	r18, r24
    1cc8:	39 2b       	or	r19, r25
    1cca:	4a 2b       	or	r20, r26
    1ccc:	5b 2b       	or	r21, r27
    1cce:	ea 18       	sub	r14, r10
    1cd0:	fb 08       	sbc	r15, r11
    1cd2:	0c 09       	sbc	r16, r12
    1cd4:	1d 09       	sbc	r17, r13
    1cd6:	b6 95       	lsr	r27
    1cd8:	a7 95       	ror	r26
    1cda:	97 95       	ror	r25
    1cdc:	87 95       	ror	r24
    1cde:	ee 0c       	add	r14, r14
    1ce0:	ff 1c       	adc	r15, r15
    1ce2:	00 1f       	adc	r16, r16
    1ce4:	11 1f       	adc	r17, r17
    1ce6:	6f 5f       	subi	r22, 0xFF	; 255
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	6f 31       	cpi	r22, 0x1F	; 31
    1cec:	71 05       	cpc	r23, r1
    1cee:	31 f7       	brne	.-52     	; 0x1cbc <__divsf3+0xda>
    1cf0:	da 01       	movw	r26, r20
    1cf2:	c9 01       	movw	r24, r18
    1cf4:	8f 77       	andi	r24, 0x7F	; 127
    1cf6:	90 70       	andi	r25, 0x00	; 0
    1cf8:	a0 70       	andi	r26, 0x00	; 0
    1cfa:	b0 70       	andi	r27, 0x00	; 0
    1cfc:	80 34       	cpi	r24, 0x40	; 64
    1cfe:	91 05       	cpc	r25, r1
    1d00:	a1 05       	cpc	r26, r1
    1d02:	b1 05       	cpc	r27, r1
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <__divsf3+0x13c>
    1d06:	27 fd       	sbrc	r18, 7
    1d08:	0a c0       	rjmp	.+20     	; 0x1d1e <__divsf3+0x13c>
    1d0a:	e1 14       	cp	r14, r1
    1d0c:	f1 04       	cpc	r15, r1
    1d0e:	01 05       	cpc	r16, r1
    1d10:	11 05       	cpc	r17, r1
    1d12:	29 f0       	breq	.+10     	; 0x1d1e <__divsf3+0x13c>
    1d14:	20 5c       	subi	r18, 0xC0	; 192
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	4f 4f       	sbci	r20, 0xFF	; 255
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	20 78       	andi	r18, 0x80	; 128
    1d1e:	2d 87       	std	Y+13, r18	; 0x0d
    1d20:	3e 87       	std	Y+14, r19	; 0x0e
    1d22:	4f 87       	std	Y+15, r20	; 0x0f
    1d24:	58 8b       	std	Y+16, r21	; 0x10
    1d26:	be 01       	movw	r22, r28
    1d28:	67 5f       	subi	r22, 0xF7	; 247
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__pack_f>
    1d32:	68 96       	adiw	r28, 0x18	; 24
    1d34:	ea e0       	ldi	r30, 0x0A	; 10
    1d36:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x10>

00001d3a <__gesf2>:
    1d3a:	a8 e1       	ldi	r26, 0x18	; 24
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e3 ea       	ldi	r30, 0xA3	; 163
    1d40:	fe e0       	ldi	r31, 0x0E	; 14
    1d42:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__+0x18>
    1d46:	69 83       	std	Y+1, r22	; 0x01
    1d48:	7a 83       	std	Y+2, r23	; 0x02
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	2d 83       	std	Y+5, r18	; 0x05
    1d50:	3e 83       	std	Y+6, r19	; 0x06
    1d52:	4f 83       	std	Y+7, r20	; 0x07
    1d54:	58 87       	std	Y+8, r21	; 0x08
    1d56:	89 e0       	ldi	r24, 0x09	; 9
    1d58:	e8 2e       	mov	r14, r24
    1d5a:	f1 2c       	mov	r15, r1
    1d5c:	ec 0e       	add	r14, r28
    1d5e:	fd 1e       	adc	r15, r29
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	b7 01       	movw	r22, r14
    1d66:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1d6a:	8e 01       	movw	r16, r28
    1d6c:	0f 5e       	subi	r16, 0xEF	; 239
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	ce 01       	movw	r24, r28
    1d72:	05 96       	adiw	r24, 0x05	; 5
    1d74:	b8 01       	movw	r22, r16
    1d76:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	40 f0       	brcs	.+16     	; 0x1d90 <__gesf2+0x56>
    1d80:	89 89       	ldd	r24, Y+17	; 0x11
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	28 f0       	brcs	.+10     	; 0x1d90 <__gesf2+0x56>
    1d86:	c7 01       	movw	r24, r14
    1d88:	b8 01       	movw	r22, r16
    1d8a:	0e 94 36 11 	call	0x226c	; 0x226c <__fpcmp_parts_f>
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <__gesf2+0x58>
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	68 96       	adiw	r28, 0x18	; 24
    1d94:	e6 e0       	ldi	r30, 0x06	; 6
    1d96:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__+0x18>

00001d9a <__fixsfsi>:
    1d9a:	ac e0       	ldi	r26, 0x0C	; 12
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1da0:	fe e0       	ldi	r31, 0x0E	; 14
    1da2:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__+0x20>
    1da6:	69 83       	std	Y+1, r22	; 0x01
    1da8:	7a 83       	std	Y+2, r23	; 0x02
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	be 01       	movw	r22, r28
    1db4:	6b 5f       	subi	r22, 0xFB	; 251
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	0e 94 be 10 	call	0x217c	; 0x217c <__unpack_f>
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	61 f1       	breq	.+88     	; 0x1e1a <__fixsfsi+0x80>
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	50 f1       	brcs	.+84     	; 0x1e1a <__fixsfsi+0x80>
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <__fixsfsi+0x38>
    1dca:	8e 81       	ldd	r24, Y+6	; 0x06
    1dcc:	88 23       	and	r24, r24
    1dce:	51 f1       	breq	.+84     	; 0x1e24 <__fixsfsi+0x8a>
    1dd0:	2e c0       	rjmp	.+92     	; 0x1e2e <__fixsfsi+0x94>
    1dd2:	2f 81       	ldd	r18, Y+7	; 0x07
    1dd4:	38 85       	ldd	r19, Y+8	; 0x08
    1dd6:	37 fd       	sbrc	r19, 7
    1dd8:	20 c0       	rjmp	.+64     	; 0x1e1a <__fixsfsi+0x80>
    1dda:	6e 81       	ldd	r22, Y+6	; 0x06
    1ddc:	2f 31       	cpi	r18, 0x1F	; 31
    1dde:	31 05       	cpc	r19, r1
    1de0:	1c f0       	brlt	.+6      	; 0x1de8 <__fixsfsi+0x4e>
    1de2:	66 23       	and	r22, r22
    1de4:	f9 f0       	breq	.+62     	; 0x1e24 <__fixsfsi+0x8a>
    1de6:	23 c0       	rjmp	.+70     	; 0x1e2e <__fixsfsi+0x94>
    1de8:	8e e1       	ldi	r24, 0x1E	; 30
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	82 1b       	sub	r24, r18
    1dee:	93 0b       	sbc	r25, r19
    1df0:	29 85       	ldd	r18, Y+9	; 0x09
    1df2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1df6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1df8:	04 c0       	rjmp	.+8      	; 0x1e02 <__fixsfsi+0x68>
    1dfa:	56 95       	lsr	r21
    1dfc:	47 95       	ror	r20
    1dfe:	37 95       	ror	r19
    1e00:	27 95       	ror	r18
    1e02:	8a 95       	dec	r24
    1e04:	d2 f7       	brpl	.-12     	; 0x1dfa <__fixsfsi+0x60>
    1e06:	66 23       	and	r22, r22
    1e08:	b1 f0       	breq	.+44     	; 0x1e36 <__fixsfsi+0x9c>
    1e0a:	50 95       	com	r21
    1e0c:	40 95       	com	r20
    1e0e:	30 95       	com	r19
    1e10:	21 95       	neg	r18
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	4f 4f       	sbci	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	0e c0       	rjmp	.+28     	; 0x1e36 <__fixsfsi+0x9c>
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <__fixsfsi+0x9c>
    1e24:	2f ef       	ldi	r18, 0xFF	; 255
    1e26:	3f ef       	ldi	r19, 0xFF	; 255
    1e28:	4f ef       	ldi	r20, 0xFF	; 255
    1e2a:	5f e7       	ldi	r21, 0x7F	; 127
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <__fixsfsi+0x9c>
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	50 e8       	ldi	r21, 0x80	; 128
    1e36:	b9 01       	movw	r22, r18
    1e38:	ca 01       	movw	r24, r20
    1e3a:	2c 96       	adiw	r28, 0x0c	; 12
    1e3c:	e2 e0       	ldi	r30, 0x02	; 2
    1e3e:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__+0x20>

00001e42 <__floatunsisf>:
    1e42:	a8 e0       	ldi	r26, 0x08	; 8
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e7 e2       	ldi	r30, 0x27	; 39
    1e48:	ff e0       	ldi	r31, 0x0F	; 15
    1e4a:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__+0x10>
    1e4e:	7b 01       	movw	r14, r22
    1e50:	8c 01       	movw	r16, r24
    1e52:	61 15       	cp	r22, r1
    1e54:	71 05       	cpc	r23, r1
    1e56:	81 05       	cpc	r24, r1
    1e58:	91 05       	cpc	r25, r1
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <__floatunsisf+0x20>
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	60 c0       	rjmp	.+192    	; 0x1f22 <__floatunsisf+0xe0>
    1e62:	83 e0       	ldi	r24, 0x03	; 3
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	8e e1       	ldi	r24, 0x1E	; 30
    1e68:	c8 2e       	mov	r12, r24
    1e6a:	d1 2c       	mov	r13, r1
    1e6c:	dc 82       	std	Y+4, r13	; 0x04
    1e6e:	cb 82       	std	Y+3, r12	; 0x03
    1e70:	ed 82       	std	Y+5, r14	; 0x05
    1e72:	fe 82       	std	Y+6, r15	; 0x06
    1e74:	0f 83       	std	Y+7, r16	; 0x07
    1e76:	18 87       	std	Y+8, r17	; 0x08
    1e78:	c8 01       	movw	r24, r16
    1e7a:	b7 01       	movw	r22, r14
    1e7c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__clzsi2>
    1e80:	fc 01       	movw	r30, r24
    1e82:	31 97       	sbiw	r30, 0x01	; 1
    1e84:	f7 ff       	sbrs	r31, 7
    1e86:	3b c0       	rjmp	.+118    	; 0x1efe <__floatunsisf+0xbc>
    1e88:	22 27       	eor	r18, r18
    1e8a:	33 27       	eor	r19, r19
    1e8c:	2e 1b       	sub	r18, r30
    1e8e:	3f 0b       	sbc	r19, r31
    1e90:	57 01       	movw	r10, r14
    1e92:	68 01       	movw	r12, r16
    1e94:	02 2e       	mov	r0, r18
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <__floatunsisf+0x5e>
    1e98:	d6 94       	lsr	r13
    1e9a:	c7 94       	ror	r12
    1e9c:	b7 94       	ror	r11
    1e9e:	a7 94       	ror	r10
    1ea0:	0a 94       	dec	r0
    1ea2:	d2 f7       	brpl	.-12     	; 0x1e98 <__floatunsisf+0x56>
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <__floatunsisf+0x7c>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	aa 1f       	adc	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	2a 95       	dec	r18
    1ec0:	d2 f7       	brpl	.-12     	; 0x1eb6 <__floatunsisf+0x74>
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	a1 09       	sbc	r26, r1
    1ec6:	b1 09       	sbc	r27, r1
    1ec8:	8e 21       	and	r24, r14
    1eca:	9f 21       	and	r25, r15
    1ecc:	a0 23       	and	r26, r16
    1ece:	b1 23       	and	r27, r17
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	a1 05       	cpc	r26, r1
    1ed4:	b1 05       	cpc	r27, r1
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <__floatunsisf+0x9e>
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	4a 29       	or	r20, r10
    1ee2:	5b 29       	or	r21, r11
    1ee4:	6c 29       	or	r22, r12
    1ee6:	7d 29       	or	r23, r13
    1ee8:	4d 83       	std	Y+5, r20	; 0x05
    1eea:	5e 83       	std	Y+6, r21	; 0x06
    1eec:	6f 83       	std	Y+7, r22	; 0x07
    1eee:	78 87       	std	Y+8, r23	; 0x08
    1ef0:	8e e1       	ldi	r24, 0x1E	; 30
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	8e 1b       	sub	r24, r30
    1ef6:	9f 0b       	sbc	r25, r31
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	12 c0       	rjmp	.+36     	; 0x1f22 <__floatunsisf+0xe0>
    1efe:	30 97       	sbiw	r30, 0x00	; 0
    1f00:	81 f0       	breq	.+32     	; 0x1f22 <__floatunsisf+0xe0>
    1f02:	0e 2e       	mov	r0, r30
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <__floatunsisf+0xcc>
    1f06:	ee 0c       	add	r14, r14
    1f08:	ff 1c       	adc	r15, r15
    1f0a:	00 1f       	adc	r16, r16
    1f0c:	11 1f       	adc	r17, r17
    1f0e:	0a 94       	dec	r0
    1f10:	d2 f7       	brpl	.-12     	; 0x1f06 <__floatunsisf+0xc4>
    1f12:	ed 82       	std	Y+5, r14	; 0x05
    1f14:	fe 82       	std	Y+6, r15	; 0x06
    1f16:	0f 83       	std	Y+7, r16	; 0x07
    1f18:	18 87       	std	Y+8, r17	; 0x08
    1f1a:	ce 1a       	sub	r12, r30
    1f1c:	df 0a       	sbc	r13, r31
    1f1e:	dc 82       	std	Y+4, r13	; 0x04
    1f20:	cb 82       	std	Y+3, r12	; 0x03
    1f22:	1a 82       	std	Y+2, r1	; 0x02
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__pack_f>
    1f2c:	28 96       	adiw	r28, 0x08	; 8
    1f2e:	ea e0       	ldi	r30, 0x0A	; 10
    1f30:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__+0x10>

00001f34 <__clzsi2>:
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	7b 01       	movw	r14, r22
    1f3e:	8c 01       	movw	r16, r24
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	e8 16       	cp	r14, r24
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	f8 06       	cpc	r15, r24
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	08 07       	cpc	r16, r24
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	18 07       	cpc	r17, r24
    1f50:	88 f4       	brcc	.+34     	; 0x1f74 <__clzsi2+0x40>
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	e8 16       	cp	r14, r24
    1f56:	f1 04       	cpc	r15, r1
    1f58:	01 05       	cpc	r16, r1
    1f5a:	11 05       	cpc	r17, r1
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <__clzsi2+0x36>
    1f5e:	28 f0       	brcs	.+10     	; 0x1f6a <__clzsi2+0x36>
    1f60:	88 e0       	ldi	r24, 0x08	; 8
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	17 c0       	rjmp	.+46     	; 0x1f98 <__clzsi2+0x64>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e0       	ldi	r26, 0x00	; 0
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	12 c0       	rjmp	.+36     	; 0x1f98 <__clzsi2+0x64>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	e8 16       	cp	r14, r24
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	f8 06       	cpc	r15, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	08 07       	cpc	r16, r24
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	18 07       	cpc	r17, r24
    1f84:	28 f0       	brcs	.+10     	; 0x1f90 <__clzsi2+0x5c>
    1f86:	88 e1       	ldi	r24, 0x18	; 24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e0       	ldi	r26, 0x00	; 0
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__clzsi2+0x64>
    1f90:	80 e1       	ldi	r24, 0x10	; 16
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	a0 e0       	ldi	r26, 0x00	; 0
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	20 e2       	ldi	r18, 0x20	; 32
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	28 1b       	sub	r18, r24
    1fa2:	39 0b       	sbc	r19, r25
    1fa4:	4a 0b       	sbc	r20, r26
    1fa6:	5b 0b       	sbc	r21, r27
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <__clzsi2+0x7e>
    1faa:	16 95       	lsr	r17
    1fac:	07 95       	ror	r16
    1fae:	f7 94       	ror	r15
    1fb0:	e7 94       	ror	r14
    1fb2:	8a 95       	dec	r24
    1fb4:	d2 f7       	brpl	.-12     	; 0x1faa <__clzsi2+0x76>
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	e1 5a       	subi	r30, 0xA1	; 161
    1fba:	fd 4f       	sbci	r31, 0xFD	; 253
    1fbc:	80 81       	ld	r24, Z
    1fbe:	28 1b       	sub	r18, r24
    1fc0:	31 09       	sbc	r19, r1
    1fc2:	41 09       	sbc	r20, r1
    1fc4:	51 09       	sbc	r21, r1
    1fc6:	c9 01       	movw	r24, r18
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	08 95       	ret

00001fd2 <__pack_f>:
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e4 80       	ldd	r14, Z+4	; 0x04
    1fe0:	f5 80       	ldd	r15, Z+5	; 0x05
    1fe2:	06 81       	ldd	r16, Z+6	; 0x06
    1fe4:	17 81       	ldd	r17, Z+7	; 0x07
    1fe6:	d1 80       	ldd	r13, Z+1	; 0x01
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	48 f4       	brcc	.+18     	; 0x2000 <__pack_f+0x2e>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e1       	ldi	r26, 0x10	; 16
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e8 2a       	or	r14, r24
    1ff8:	f9 2a       	or	r15, r25
    1ffa:	0a 2b       	or	r16, r26
    1ffc:	1b 2b       	or	r17, r27
    1ffe:	a5 c0       	rjmp	.+330    	; 0x214a <__pack_f+0x178>
    2000:	84 30       	cpi	r24, 0x04	; 4
    2002:	09 f4       	brne	.+2      	; 0x2006 <__pack_f+0x34>
    2004:	9f c0       	rjmp	.+318    	; 0x2144 <__pack_f+0x172>
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	21 f4       	brne	.+8      	; 0x2012 <__pack_f+0x40>
    200a:	ee 24       	eor	r14, r14
    200c:	ff 24       	eor	r15, r15
    200e:	87 01       	movw	r16, r14
    2010:	05 c0       	rjmp	.+10     	; 0x201c <__pack_f+0x4a>
    2012:	e1 14       	cp	r14, r1
    2014:	f1 04       	cpc	r15, r1
    2016:	01 05       	cpc	r16, r1
    2018:	11 05       	cpc	r17, r1
    201a:	19 f4       	brne	.+6      	; 0x2022 <__pack_f+0x50>
    201c:	e0 e0       	ldi	r30, 0x00	; 0
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	96 c0       	rjmp	.+300    	; 0x214e <__pack_f+0x17c>
    2022:	62 81       	ldd	r22, Z+2	; 0x02
    2024:	73 81       	ldd	r23, Z+3	; 0x03
    2026:	9f ef       	ldi	r25, 0xFF	; 255
    2028:	62 38       	cpi	r22, 0x82	; 130
    202a:	79 07       	cpc	r23, r25
    202c:	0c f0       	brlt	.+2      	; 0x2030 <__pack_f+0x5e>
    202e:	5b c0       	rjmp	.+182    	; 0x20e6 <__pack_f+0x114>
    2030:	22 e8       	ldi	r18, 0x82	; 130
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	26 1b       	sub	r18, r22
    2036:	37 0b       	sbc	r19, r23
    2038:	2a 31       	cpi	r18, 0x1A	; 26
    203a:	31 05       	cpc	r19, r1
    203c:	2c f0       	brlt	.+10     	; 0x2048 <__pack_f+0x76>
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	2a c0       	rjmp	.+84     	; 0x209c <__pack_f+0xca>
    2048:	b8 01       	movw	r22, r16
    204a:	a7 01       	movw	r20, r14
    204c:	02 2e       	mov	r0, r18
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <__pack_f+0x86>
    2050:	76 95       	lsr	r23
    2052:	67 95       	ror	r22
    2054:	57 95       	ror	r21
    2056:	47 95       	ror	r20
    2058:	0a 94       	dec	r0
    205a:	d2 f7       	brpl	.-12     	; 0x2050 <__pack_f+0x7e>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e0       	ldi	r26, 0x00	; 0
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	04 c0       	rjmp	.+8      	; 0x206e <__pack_f+0x9c>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	aa 1f       	adc	r26, r26
    206c:	bb 1f       	adc	r27, r27
    206e:	2a 95       	dec	r18
    2070:	d2 f7       	brpl	.-12     	; 0x2066 <__pack_f+0x94>
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	a1 09       	sbc	r26, r1
    2076:	b1 09       	sbc	r27, r1
    2078:	8e 21       	and	r24, r14
    207a:	9f 21       	and	r25, r15
    207c:	a0 23       	and	r26, r16
    207e:	b1 23       	and	r27, r17
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	a1 05       	cpc	r26, r1
    2084:	b1 05       	cpc	r27, r1
    2086:	21 f0       	breq	.+8      	; 0x2090 <__pack_f+0xbe>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	9a 01       	movw	r18, r20
    2092:	ab 01       	movw	r20, r22
    2094:	28 2b       	or	r18, r24
    2096:	39 2b       	or	r19, r25
    2098:	4a 2b       	or	r20, r26
    209a:	5b 2b       	or	r21, r27
    209c:	da 01       	movw	r26, r20
    209e:	c9 01       	movw	r24, r18
    20a0:	8f 77       	andi	r24, 0x7F	; 127
    20a2:	90 70       	andi	r25, 0x00	; 0
    20a4:	a0 70       	andi	r26, 0x00	; 0
    20a6:	b0 70       	andi	r27, 0x00	; 0
    20a8:	80 34       	cpi	r24, 0x40	; 64
    20aa:	91 05       	cpc	r25, r1
    20ac:	a1 05       	cpc	r26, r1
    20ae:	b1 05       	cpc	r27, r1
    20b0:	39 f4       	brne	.+14     	; 0x20c0 <__pack_f+0xee>
    20b2:	27 ff       	sbrs	r18, 7
    20b4:	09 c0       	rjmp	.+18     	; 0x20c8 <__pack_f+0xf6>
    20b6:	20 5c       	subi	r18, 0xC0	; 192
    20b8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ba:	4f 4f       	sbci	r20, 0xFF	; 255
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <__pack_f+0xf6>
    20c0:	21 5c       	subi	r18, 0xC1	; 193
    20c2:	3f 4f       	sbci	r19, 0xFF	; 255
    20c4:	4f 4f       	sbci	r20, 0xFF	; 255
    20c6:	5f 4f       	sbci	r21, 0xFF	; 255
    20c8:	e0 e0       	ldi	r30, 0x00	; 0
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	20 30       	cpi	r18, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	3a 07       	cpc	r19, r26
    20d2:	a0 e0       	ldi	r26, 0x00	; 0
    20d4:	4a 07       	cpc	r20, r26
    20d6:	a0 e4       	ldi	r26, 0x40	; 64
    20d8:	5a 07       	cpc	r21, r26
    20da:	10 f0       	brcs	.+4      	; 0x20e0 <__pack_f+0x10e>
    20dc:	e1 e0       	ldi	r30, 0x01	; 1
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	79 01       	movw	r14, r18
    20e2:	8a 01       	movw	r16, r20
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <__pack_f+0x162>
    20e6:	60 38       	cpi	r22, 0x80	; 128
    20e8:	71 05       	cpc	r23, r1
    20ea:	64 f5       	brge	.+88     	; 0x2144 <__pack_f+0x172>
    20ec:	fb 01       	movw	r30, r22
    20ee:	e1 58       	subi	r30, 0x81	; 129
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	d8 01       	movw	r26, r16
    20f4:	c7 01       	movw	r24, r14
    20f6:	8f 77       	andi	r24, 0x7F	; 127
    20f8:	90 70       	andi	r25, 0x00	; 0
    20fa:	a0 70       	andi	r26, 0x00	; 0
    20fc:	b0 70       	andi	r27, 0x00	; 0
    20fe:	80 34       	cpi	r24, 0x40	; 64
    2100:	91 05       	cpc	r25, r1
    2102:	a1 05       	cpc	r26, r1
    2104:	b1 05       	cpc	r27, r1
    2106:	39 f4       	brne	.+14     	; 0x2116 <__pack_f+0x144>
    2108:	e7 fe       	sbrs	r14, 7
    210a:	0d c0       	rjmp	.+26     	; 0x2126 <__pack_f+0x154>
    210c:	80 e4       	ldi	r24, 0x40	; 64
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	04 c0       	rjmp	.+8      	; 0x211e <__pack_f+0x14c>
    2116:	8f e3       	ldi	r24, 0x3F	; 63
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e0       	ldi	r26, 0x00	; 0
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e8 0e       	add	r14, r24
    2120:	f9 1e       	adc	r15, r25
    2122:	0a 1f       	adc	r16, r26
    2124:	1b 1f       	adc	r17, r27
    2126:	17 ff       	sbrs	r17, 7
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <__pack_f+0x162>
    212a:	16 95       	lsr	r17
    212c:	07 95       	ror	r16
    212e:	f7 94       	ror	r15
    2130:	e7 94       	ror	r14
    2132:	31 96       	adiw	r30, 0x01	; 1
    2134:	87 e0       	ldi	r24, 0x07	; 7
    2136:	16 95       	lsr	r17
    2138:	07 95       	ror	r16
    213a:	f7 94       	ror	r15
    213c:	e7 94       	ror	r14
    213e:	8a 95       	dec	r24
    2140:	d1 f7       	brne	.-12     	; 0x2136 <__pack_f+0x164>
    2142:	05 c0       	rjmp	.+10     	; 0x214e <__pack_f+0x17c>
    2144:	ee 24       	eor	r14, r14
    2146:	ff 24       	eor	r15, r15
    2148:	87 01       	movw	r16, r14
    214a:	ef ef       	ldi	r30, 0xFF	; 255
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	6e 2f       	mov	r22, r30
    2150:	67 95       	ror	r22
    2152:	66 27       	eor	r22, r22
    2154:	67 95       	ror	r22
    2156:	90 2f       	mov	r25, r16
    2158:	9f 77       	andi	r25, 0x7F	; 127
    215a:	d7 94       	ror	r13
    215c:	dd 24       	eor	r13, r13
    215e:	d7 94       	ror	r13
    2160:	8e 2f       	mov	r24, r30
    2162:	86 95       	lsr	r24
    2164:	49 2f       	mov	r20, r25
    2166:	46 2b       	or	r20, r22
    2168:	58 2f       	mov	r21, r24
    216a:	5d 29       	or	r21, r13
    216c:	b7 01       	movw	r22, r14
    216e:	ca 01       	movw	r24, r20
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	08 95       	ret

0000217c <__unpack_f>:
    217c:	fc 01       	movw	r30, r24
    217e:	db 01       	movw	r26, r22
    2180:	40 81       	ld	r20, Z
    2182:	51 81       	ldd	r21, Z+1	; 0x01
    2184:	22 81       	ldd	r18, Z+2	; 0x02
    2186:	62 2f       	mov	r22, r18
    2188:	6f 77       	andi	r22, 0x7F	; 127
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	22 1f       	adc	r18, r18
    218e:	22 27       	eor	r18, r18
    2190:	22 1f       	adc	r18, r18
    2192:	93 81       	ldd	r25, Z+3	; 0x03
    2194:	89 2f       	mov	r24, r25
    2196:	88 0f       	add	r24, r24
    2198:	82 2b       	or	r24, r18
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	99 1f       	adc	r25, r25
    21a0:	99 27       	eor	r25, r25
    21a2:	99 1f       	adc	r25, r25
    21a4:	11 96       	adiw	r26, 0x01	; 1
    21a6:	9c 93       	st	X, r25
    21a8:	11 97       	sbiw	r26, 0x01	; 1
    21aa:	21 15       	cp	r18, r1
    21ac:	31 05       	cpc	r19, r1
    21ae:	a9 f5       	brne	.+106    	; 0x221a <__stack+0x1b>
    21b0:	41 15       	cp	r20, r1
    21b2:	51 05       	cpc	r21, r1
    21b4:	61 05       	cpc	r22, r1
    21b6:	71 05       	cpc	r23, r1
    21b8:	11 f4       	brne	.+4      	; 0x21be <__unpack_f+0x42>
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	37 c0       	rjmp	.+110    	; 0x222c <__stack+0x2d>
    21be:	82 e8       	ldi	r24, 0x82	; 130
    21c0:	9f ef       	ldi	r25, 0xFF	; 255
    21c2:	13 96       	adiw	r26, 0x03	; 3
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
    21c8:	12 97       	sbiw	r26, 0x02	; 2
    21ca:	9a 01       	movw	r18, r20
    21cc:	ab 01       	movw	r20, r22
    21ce:	67 e0       	ldi	r22, 0x07	; 7
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	44 1f       	adc	r20, r20
    21d6:	55 1f       	adc	r21, r21
    21d8:	6a 95       	dec	r22
    21da:	d1 f7       	brne	.-12     	; 0x21d0 <__unpack_f+0x54>
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	8c 93       	st	X, r24
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <__unpack_f+0x80>
    21e2:	22 0f       	add	r18, r18
    21e4:	33 1f       	adc	r19, r19
    21e6:	44 1f       	adc	r20, r20
    21e8:	55 1f       	adc	r21, r21
    21ea:	12 96       	adiw	r26, 0x02	; 2
    21ec:	8d 91       	ld	r24, X+
    21ee:	9c 91       	ld	r25, X
    21f0:	13 97       	sbiw	r26, 0x03	; 3
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	13 96       	adiw	r26, 0x03	; 3
    21f6:	9c 93       	st	X, r25
    21f8:	8e 93       	st	-X, r24
    21fa:	12 97       	sbiw	r26, 0x02	; 2
    21fc:	20 30       	cpi	r18, 0x00	; 0
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	38 07       	cpc	r19, r24
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	48 07       	cpc	r20, r24
    2206:	80 e4       	ldi	r24, 0x40	; 64
    2208:	58 07       	cpc	r21, r24
    220a:	58 f3       	brcs	.-42     	; 0x21e2 <__unpack_f+0x66>
    220c:	14 96       	adiw	r26, 0x04	; 4
    220e:	2d 93       	st	X+, r18
    2210:	3d 93       	st	X+, r19
    2212:	4d 93       	st	X+, r20
    2214:	5c 93       	st	X, r21
    2216:	17 97       	sbiw	r26, 0x07	; 7
    2218:	08 95       	ret
    221a:	2f 3f       	cpi	r18, 0xFF	; 255
    221c:	31 05       	cpc	r19, r1
    221e:	79 f4       	brne	.+30     	; 0x223e <__stack+0x3f>
    2220:	41 15       	cp	r20, r1
    2222:	51 05       	cpc	r21, r1
    2224:	61 05       	cpc	r22, r1
    2226:	71 05       	cpc	r23, r1
    2228:	19 f4       	brne	.+6      	; 0x2230 <__stack+0x31>
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	8c 93       	st	X, r24
    222e:	08 95       	ret
    2230:	64 ff       	sbrs	r22, 4
    2232:	03 c0       	rjmp	.+6      	; 0x223a <__stack+0x3b>
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	8c 93       	st	X, r24
    2238:	12 c0       	rjmp	.+36     	; 0x225e <__stack+0x5f>
    223a:	1c 92       	st	X, r1
    223c:	10 c0       	rjmp	.+32     	; 0x225e <__stack+0x5f>
    223e:	2f 57       	subi	r18, 0x7F	; 127
    2240:	30 40       	sbci	r19, 0x00	; 0
    2242:	13 96       	adiw	r26, 0x03	; 3
    2244:	3c 93       	st	X, r19
    2246:	2e 93       	st	-X, r18
    2248:	12 97       	sbiw	r26, 0x02	; 2
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	8c 93       	st	X, r24
    224e:	87 e0       	ldi	r24, 0x07	; 7
    2250:	44 0f       	add	r20, r20
    2252:	55 1f       	adc	r21, r21
    2254:	66 1f       	adc	r22, r22
    2256:	77 1f       	adc	r23, r23
    2258:	8a 95       	dec	r24
    225a:	d1 f7       	brne	.-12     	; 0x2250 <__stack+0x51>
    225c:	70 64       	ori	r23, 0x40	; 64
    225e:	14 96       	adiw	r26, 0x04	; 4
    2260:	4d 93       	st	X+, r20
    2262:	5d 93       	st	X+, r21
    2264:	6d 93       	st	X+, r22
    2266:	7c 93       	st	X, r23
    2268:	17 97       	sbiw	r26, 0x07	; 7
    226a:	08 95       	ret

0000226c <__fpcmp_parts_f>:
    226c:	1f 93       	push	r17
    226e:	dc 01       	movw	r26, r24
    2270:	fb 01       	movw	r30, r22
    2272:	9c 91       	ld	r25, X
    2274:	92 30       	cpi	r25, 0x02	; 2
    2276:	08 f4       	brcc	.+2      	; 0x227a <__fpcmp_parts_f+0xe>
    2278:	47 c0       	rjmp	.+142    	; 0x2308 <__fpcmp_parts_f+0x9c>
    227a:	80 81       	ld	r24, Z
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	08 f4       	brcc	.+2      	; 0x2282 <__fpcmp_parts_f+0x16>
    2280:	43 c0       	rjmp	.+134    	; 0x2308 <__fpcmp_parts_f+0x9c>
    2282:	94 30       	cpi	r25, 0x04	; 4
    2284:	51 f4       	brne	.+20     	; 0x229a <__fpcmp_parts_f+0x2e>
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	1c 91       	ld	r17, X
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	99 f5       	brne	.+102    	; 0x22f4 <__fpcmp_parts_f+0x88>
    228e:	81 81       	ldd	r24, Z+1	; 0x01
    2290:	68 2f       	mov	r22, r24
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	61 1b       	sub	r22, r17
    2296:	71 09       	sbc	r23, r1
    2298:	3f c0       	rjmp	.+126    	; 0x2318 <__fpcmp_parts_f+0xac>
    229a:	84 30       	cpi	r24, 0x04	; 4
    229c:	21 f0       	breq	.+8      	; 0x22a6 <__fpcmp_parts_f+0x3a>
    229e:	92 30       	cpi	r25, 0x02	; 2
    22a0:	31 f4       	brne	.+12     	; 0x22ae <__fpcmp_parts_f+0x42>
    22a2:	82 30       	cpi	r24, 0x02	; 2
    22a4:	b9 f1       	breq	.+110    	; 0x2314 <__fpcmp_parts_f+0xa8>
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	88 23       	and	r24, r24
    22aa:	89 f1       	breq	.+98     	; 0x230e <__fpcmp_parts_f+0xa2>
    22ac:	2d c0       	rjmp	.+90     	; 0x2308 <__fpcmp_parts_f+0x9c>
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	1c 91       	ld	r17, X
    22b2:	11 97       	sbiw	r26, 0x01	; 1
    22b4:	82 30       	cpi	r24, 0x02	; 2
    22b6:	f1 f0       	breq	.+60     	; 0x22f4 <__fpcmp_parts_f+0x88>
    22b8:	81 81       	ldd	r24, Z+1	; 0x01
    22ba:	18 17       	cp	r17, r24
    22bc:	d9 f4       	brne	.+54     	; 0x22f4 <__fpcmp_parts_f+0x88>
    22be:	12 96       	adiw	r26, 0x02	; 2
    22c0:	2d 91       	ld	r18, X+
    22c2:	3c 91       	ld	r19, X
    22c4:	13 97       	sbiw	r26, 0x03	; 3
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	82 17       	cp	r24, r18
    22cc:	93 07       	cpc	r25, r19
    22ce:	94 f0       	brlt	.+36     	; 0x22f4 <__fpcmp_parts_f+0x88>
    22d0:	28 17       	cp	r18, r24
    22d2:	39 07       	cpc	r19, r25
    22d4:	bc f0       	brlt	.+46     	; 0x2304 <__fpcmp_parts_f+0x98>
    22d6:	14 96       	adiw	r26, 0x04	; 4
    22d8:	8d 91       	ld	r24, X+
    22da:	9d 91       	ld	r25, X+
    22dc:	0d 90       	ld	r0, X+
    22de:	bc 91       	ld	r27, X
    22e0:	a0 2d       	mov	r26, r0
    22e2:	24 81       	ldd	r18, Z+4	; 0x04
    22e4:	35 81       	ldd	r19, Z+5	; 0x05
    22e6:	46 81       	ldd	r20, Z+6	; 0x06
    22e8:	57 81       	ldd	r21, Z+7	; 0x07
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	4a 07       	cpc	r20, r26
    22f0:	5b 07       	cpc	r21, r27
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <__fpcmp_parts_f+0x8e>
    22f4:	11 23       	and	r17, r17
    22f6:	41 f0       	breq	.+16     	; 0x2308 <__fpcmp_parts_f+0x9c>
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <__fpcmp_parts_f+0xa2>
    22fa:	82 17       	cp	r24, r18
    22fc:	93 07       	cpc	r25, r19
    22fe:	a4 07       	cpc	r26, r20
    2300:	b5 07       	cpc	r27, r21
    2302:	40 f4       	brcc	.+16     	; 0x2314 <__fpcmp_parts_f+0xa8>
    2304:	11 23       	and	r17, r17
    2306:	19 f0       	breq	.+6      	; 0x230e <__fpcmp_parts_f+0xa2>
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <__fpcmp_parts_f+0xac>
    230e:	6f ef       	ldi	r22, 0xFF	; 255
    2310:	7f ef       	ldi	r23, 0xFF	; 255
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <__fpcmp_parts_f+0xac>
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	cb 01       	movw	r24, r22
    231a:	1f 91       	pop	r17
    231c:	08 95       	ret

0000231e <__udivmodqi4>:
    231e:	99 1b       	sub	r25, r25
    2320:	79 e0       	ldi	r23, 0x09	; 9
    2322:	04 c0       	rjmp	.+8      	; 0x232c <__udivmodqi4_ep>

00002324 <__udivmodqi4_loop>:
    2324:	99 1f       	adc	r25, r25
    2326:	96 17       	cp	r25, r22
    2328:	08 f0       	brcs	.+2      	; 0x232c <__udivmodqi4_ep>
    232a:	96 1b       	sub	r25, r22

0000232c <__udivmodqi4_ep>:
    232c:	88 1f       	adc	r24, r24
    232e:	7a 95       	dec	r23
    2330:	c9 f7       	brne	.-14     	; 0x2324 <__udivmodqi4_loop>
    2332:	80 95       	com	r24
    2334:	08 95       	ret

00002336 <__udivmodhi4>:
    2336:	aa 1b       	sub	r26, r26
    2338:	bb 1b       	sub	r27, r27
    233a:	51 e1       	ldi	r21, 0x11	; 17
    233c:	07 c0       	rjmp	.+14     	; 0x234c <__udivmodhi4_ep>

0000233e <__udivmodhi4_loop>:
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	a6 17       	cp	r26, r22
    2344:	b7 07       	cpc	r27, r23
    2346:	10 f0       	brcs	.+4      	; 0x234c <__udivmodhi4_ep>
    2348:	a6 1b       	sub	r26, r22
    234a:	b7 0b       	sbc	r27, r23

0000234c <__udivmodhi4_ep>:
    234c:	88 1f       	adc	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	5a 95       	dec	r21
    2352:	a9 f7       	brne	.-22     	; 0x233e <__udivmodhi4_loop>
    2354:	80 95       	com	r24
    2356:	90 95       	com	r25
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	08 95       	ret

0000235e <__prologue_saves__>:
    235e:	2f 92       	push	r2
    2360:	3f 92       	push	r3
    2362:	4f 92       	push	r4
    2364:	5f 92       	push	r5
    2366:	6f 92       	push	r6
    2368:	7f 92       	push	r7
    236a:	8f 92       	push	r8
    236c:	9f 92       	push	r9
    236e:	af 92       	push	r10
    2370:	bf 92       	push	r11
    2372:	cf 92       	push	r12
    2374:	df 92       	push	r13
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	ca 1b       	sub	r28, r26
    2388:	db 0b       	sbc	r29, r27
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	19 94       	eijmp

00002396 <__epilogue_restores__>:
    2396:	2a 88       	ldd	r2, Y+18	; 0x12
    2398:	39 88       	ldd	r3, Y+17	; 0x11
    239a:	48 88       	ldd	r4, Y+16	; 0x10
    239c:	5f 84       	ldd	r5, Y+15	; 0x0f
    239e:	6e 84       	ldd	r6, Y+14	; 0x0e
    23a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    23a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    23a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    23a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    23a8:	b9 84       	ldd	r11, Y+9	; 0x09
    23aa:	c8 84       	ldd	r12, Y+8	; 0x08
    23ac:	df 80       	ldd	r13, Y+7	; 0x07
    23ae:	ee 80       	ldd	r14, Y+6	; 0x06
    23b0:	fd 80       	ldd	r15, Y+5	; 0x05
    23b2:	0c 81       	ldd	r16, Y+4	; 0x04
    23b4:	1b 81       	ldd	r17, Y+3	; 0x03
    23b6:	aa 81       	ldd	r26, Y+2	; 0x02
    23b8:	b9 81       	ldd	r27, Y+1	; 0x01
    23ba:	ce 0f       	add	r28, r30
    23bc:	d1 1d       	adc	r29, r1
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	ed 01       	movw	r28, r26
    23ca:	08 95       	ret

000023cc <_exit>:
    23cc:	f8 94       	cli

000023ce <__stop_program>:
    23ce:	ff cf       	rjmp	.-2      	; 0x23ce <__stop_program>
